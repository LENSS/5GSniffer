// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class FlowMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage> {
  public:
  const ::HelloMessage* hello_message_;
  const ::DataMessage* data_message_;
  const ::StopMessage* stop_message_;
  const ::ResetMessage* reset_message_;
} _FlowMessage_default_instance_;
class HelloMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HelloMessage> {
} _HelloMessage_default_instance_;
class ConfigMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConfigMessage> {
} _ConfigMessage_default_instance_;
class DataMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataMessage> {
} _DataMessage_default_instance_;
class StopMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StopMessage> {
} _StopMessage_default_instance_;
class ResetMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetMessage> {
} _ResetMessage_default_instance_;
class ConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Config> {
  public:
  const ::FileSinkConfig* file_sink_config_;
  const ::ChannelMapperConfig* channel_mapper_config_;
  const ::RotatorConfig* rotator_config_;
} _Config_default_instance_;
class FileSinkConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileSinkConfig> {
} _FileSinkConfig_default_instance_;
class ChannelMapperConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelMapperConfig> {
} _ChannelMapperConfig_default_instance_;
class RotatorConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RotatorConfig> {
} _RotatorConfig_default_instance_;

namespace protobuf_proto_2fprotocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FlowMessage_default_instance_), hello_message_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FlowMessage_default_instance_), data_message_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FlowMessage_default_instance_), stop_message_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_FlowMessage_default_instance_), reset_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowMessage, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, slots_per_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, ssb_scs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, mib_scs_common_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, mib_coreset0_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigMessage, mib_ssb_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataMessage, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), file_sink_config_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), channel_mapper_config_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Config_default_instance_), rotator_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSinkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileSinkConfig, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, cell_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, slots_per_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, subcarrier_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, scrambling_id_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, scrambling_id_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, rnti_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, rnti_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, dci_sizes_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, al_corr_thresholds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, max_rnti_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, sc_power_decision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, num_candidates_per_al_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, num_prbs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_interleaving_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_reg_bundle_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_interleaver_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_nshift_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, coreset_ofdm_symbol_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMapperConfig, num_symbols_per_slot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatorConfig, sample_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RotatorConfig, frequency_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FlowMessage)},
  { 11, -1, sizeof(HelloMessage)},
  { 16, -1, sizeof(ConfigMessage)},
  { 29, -1, sizeof(DataMessage)},
  { 35, -1, sizeof(StopMessage)},
  { 40, -1, sizeof(ResetMessage)},
  { 45, -1, sizeof(Config)},
  { 54, -1, sizeof(FileSinkConfig)},
  { 60, -1, sizeof(ChannelMapperConfig)},
  { 86, -1, sizeof(RotatorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FlowMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HelloMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConfigMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StopMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FileSinkConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelMapperConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RotatorConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto/protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _FlowMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _HelloMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ConfigMessage_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DataMessage_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _StopMessage_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ResetMessage_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Config_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _FileSinkConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ChannelMapperConfig_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _RotatorConfig_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FlowMessage_default_instance_.DefaultConstruct();
  _HelloMessage_default_instance_.DefaultConstruct();
  _ConfigMessage_default_instance_.DefaultConstruct();
  _DataMessage_default_instance_.DefaultConstruct();
  _StopMessage_default_instance_.DefaultConstruct();
  _ResetMessage_default_instance_.DefaultConstruct();
  _Config_default_instance_.DefaultConstruct();
  _FileSinkConfig_default_instance_.DefaultConstruct();
  _ChannelMapperConfig_default_instance_.DefaultConstruct();
  _RotatorConfig_default_instance_.DefaultConstruct();
  _FlowMessage_default_instance_.hello_message_ = const_cast< ::HelloMessage*>(
      ::HelloMessage::internal_default_instance());
  _FlowMessage_default_instance_.data_message_ = const_cast< ::DataMessage*>(
      ::DataMessage::internal_default_instance());
  _FlowMessage_default_instance_.stop_message_ = const_cast< ::StopMessage*>(
      ::StopMessage::internal_default_instance());
  _FlowMessage_default_instance_.reset_message_ = const_cast< ::ResetMessage*>(
      ::ResetMessage::internal_default_instance());
  _Config_default_instance_.file_sink_config_ = const_cast< ::FileSinkConfig*>(
      ::FileSinkConfig::internal_default_instance());
  _Config_default_instance_.channel_mapper_config_ = const_cast< ::ChannelMapperConfig*>(
      ::ChannelMapperConfig::internal_default_instance());
  _Config_default_instance_.rotator_config_ = const_cast< ::RotatorConfig*>(
      ::RotatorConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024proto/protocol.proto\"\320\001\n\013FlowMessage\022\032"
      "\n\004type\030\001 \001(\0162\014.MessageType\022&\n\rhello_mess"
      "age\030\002 \001(\0132\r.HelloMessageH\000\022$\n\014data_messa"
      "ge\030\003 \001(\0132\014.DataMessageH\000\022$\n\014stop_message"
      "\030\004 \001(\0132\014.StopMessageH\000\022&\n\rreset_message\030"
      "\005 \001(\0132\r.ResetMessageH\000B\t\n\007payload\"\016\n\014Hel"
      "loMessage\"\273\001\n\rConfigMessage\022\016\n\006config\030\001 "
      "\001(\t\022\023\n\013sample_rate\030\002 \001(\r\022\017\n\007cell_id\030\003 \001("
      "\r\022\027\n\017slots_per_frame\030\004 \001(\r\022\017\n\007ssb_scs\030\005 "
      "\001(\r\022\026\n\016mib_scs_common\030\006 \001(\r\022\032\n\022mib_cores"
      "et0_index\030\007 \001(\r\022\026\n\016mib_ssb_offset\030\010 \001(\r\""
      "\033\n\013DataMessage\022\014\n\004data\030\001 \001(\014\"\r\n\013StopMess"
      "age\"\016\n\014ResetMessage\"\240\001\n\006Config\022+\n\020file_s"
      "ink_config\030\001 \001(\0132\017.FileSinkConfigH\000\0225\n\025c"
      "hannel_mapper_config\030\002 \001(\0132\024.ChannelMapp"
      "erConfigH\000\022(\n\016rotator_config\030\003 \001(\0132\016.Rot"
      "atorConfigH\000B\010\n\006config\"\036\n\016FileSinkConfig"
      "\022\014\n\004path\030\001 \001(\t\"\305\004\n\023ChannelMapperConfig\022\017"
      "\n\007cell_id\030\001 \001(\r\022\027\n\017slots_per_frame\030\002 \001(\r"
      "\022\031\n\021subcarrier_offset\030\003 \001(\005\022\033\n\023scramblin"
      "g_id_start\030\004 \001(\r\022\031\n\021scrambling_id_end\030\005 "
      "\001(\r\022\022\n\nrnti_start\030\006 \001(\r\022\020\n\010rnti_end\030\007 \001("
      "\r\022\026\n\016dci_sizes_list\030\010 \003(\r\022\032\n\022al_corr_thr"
      "esholds\030\t \003(\002\022\033\n\023max_rnti_queue_size\030\n \001"
      "(\r\022\031\n\021sc_power_decision\030\013 \001(\010\022\035\n\025num_can"
      "didates_per_al\030\014 \003(\r\022\022\n\ncoreset_id\030\r \001(\r"
      "\022\020\n\010num_prbs\030\016 \001(\r\022\030\n\020coreset_duration\030\017"
      " \001(\r\022$\n\034coreset_interleaving_pattern\030\020 \001"
      "(\t\022\037\n\027coreset_reg_bundle_size\030\021 \001(\r\022 \n\030c"
      "oreset_interleaver_size\030\022 \001(\r\022\026\n\016coreset"
      "_nshift\030\023 \001(\r\022!\n\031coreset_ofdm_symbol_sta"
      "rt\030\024 \001(\r\022\034\n\024num_symbols_per_slot\030\025 \001(\r\"7"
      "\n\rRotatorConfig\022\023\n\013sample_rate\030\001 \001(\r\022\021\n\t"
      "frequency\030\002 \001(\002*.\n\013MessageType\022\t\n\005HELLO\020"
      "\000\022\n\n\006CONFIG\020\001\022\010\n\004DATA\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1391);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2fprotocol_2eproto

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage::kTypeFieldNumber;
const int FlowMessage::kHelloMessageFieldNumber;
const int FlowMessage::kDataMessageFieldNumber;
const int FlowMessage::kStopMessageFieldNumber;
const int FlowMessage::kResetMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage::FlowMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FlowMessage)
}
FlowMessage::FlowMessage(const FlowMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kHelloMessage: {
      mutable_hello_message()->::HelloMessage::MergeFrom(from.hello_message());
      break;
    }
    case kDataMessage: {
      mutable_data_message()->::DataMessage::MergeFrom(from.data_message());
      break;
    }
    case kStopMessage: {
      mutable_stop_message()->::StopMessage::MergeFrom(from.stop_message());
      break;
    }
    case kResetMessage: {
      mutable_reset_message()->::ResetMessage::MergeFrom(from.reset_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:FlowMessage)
}

void FlowMessage::SharedCtor() {
  type_ = 0;
  clear_has_payload();
  _cached_size_ = 0;
}

FlowMessage::~FlowMessage() {
  // @@protoc_insertion_point(destructor:FlowMessage)
  SharedDtor();
}

void FlowMessage::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void FlowMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FlowMessage& FlowMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

FlowMessage* FlowMessage::New(::google::protobuf::Arena* arena) const {
  FlowMessage* n = new FlowMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FlowMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:FlowMessage)
  switch (payload_case()) {
    case kHelloMessage: {
      delete payload_.hello_message_;
      break;
    }
    case kDataMessage: {
      delete payload_.data_message_;
      break;
    }
    case kStopMessage: {
      delete payload_.stop_message_;
      break;
    }
    case kResetMessage: {
      delete payload_.reset_message_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void FlowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FlowMessage)
  type_ = 0;
  clear_payload();
}

bool FlowMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FlowMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .HelloMessage hello_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hello_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DataMessage data_message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .StopMessage stop_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stop_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ResetMessage reset_message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FlowMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FlowMessage)
  return false;
#undef DO_
}

void FlowMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .HelloMessage hello_message = 2;
  if (has_hello_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *payload_.hello_message_, output);
  }

  // .DataMessage data_message = 3;
  if (has_data_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *payload_.data_message_, output);
  }

  // .StopMessage stop_message = 4;
  if (has_stop_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *payload_.stop_message_, output);
  }

  // .ResetMessage reset_message = 5;
  if (has_reset_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *payload_.reset_message_, output);
  }

  // @@protoc_insertion_point(serialize_end:FlowMessage)
}

::google::protobuf::uint8* FlowMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .HelloMessage hello_message = 2;
  if (has_hello_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *payload_.hello_message_, deterministic, target);
  }

  // .DataMessage data_message = 3;
  if (has_data_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *payload_.data_message_, deterministic, target);
  }

  // .StopMessage stop_message = 4;
  if (has_stop_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *payload_.stop_message_, deterministic, target);
  }

  // .ResetMessage reset_message = 5;
  if (has_reset_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *payload_.reset_message_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FlowMessage)
  return target;
}

size_t FlowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FlowMessage)
  size_t total_size = 0;

  // .MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (payload_case()) {
    // .HelloMessage hello_message = 2;
    case kHelloMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.hello_message_);
      break;
    }
    // .DataMessage data_message = 3;
    case kDataMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.data_message_);
      break;
    }
    // .StopMessage stop_message = 4;
    case kStopMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.stop_message_);
      break;
    }
    // .ResetMessage reset_message = 5;
    case kResetMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *payload_.reset_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FlowMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FlowMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FlowMessage)
    MergeFrom(*source);
  }
}

void FlowMessage::MergeFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.payload_case()) {
    case kHelloMessage: {
      mutable_hello_message()->::HelloMessage::MergeFrom(from.hello_message());
      break;
    }
    case kDataMessage: {
      mutable_data_message()->::DataMessage::MergeFrom(from.data_message());
      break;
    }
    case kStopMessage: {
      mutable_stop_message()->::StopMessage::MergeFrom(from.stop_message());
      break;
    }
    case kResetMessage: {
      mutable_reset_message()->::ResetMessage::MergeFrom(from.reset_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void FlowMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage::CopyFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage::IsInitialized() const {
  return true;
}

void FlowMessage::Swap(FlowMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage::InternalSwap(FlowMessage* other) {
  std::swap(type_, other->type_);
  std::swap(payload_, other->payload_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FlowMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowMessage

// .MessageType type = 1;
void FlowMessage::clear_type() {
  type_ = 0;
}
::MessageType FlowMessage::type() const {
  // @@protoc_insertion_point(field_get:FlowMessage.type)
  return static_cast< ::MessageType >(type_);
}
void FlowMessage::set_type(::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FlowMessage.type)
}

// .HelloMessage hello_message = 2;
bool FlowMessage::has_hello_message() const {
  return payload_case() == kHelloMessage;
}
void FlowMessage::set_has_hello_message() {
  _oneof_case_[0] = kHelloMessage;
}
void FlowMessage::clear_hello_message() {
  if (has_hello_message()) {
    delete payload_.hello_message_;
    clear_has_payload();
  }
}
 const ::HelloMessage& FlowMessage::hello_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.hello_message)
  return has_hello_message()
      ? *payload_.hello_message_
      : ::HelloMessage::default_instance();
}
::HelloMessage* FlowMessage::mutable_hello_message() {
  if (!has_hello_message()) {
    clear_payload();
    set_has_hello_message();
    payload_.hello_message_ = new ::HelloMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.hello_message)
  return payload_.hello_message_;
}
::HelloMessage* FlowMessage::release_hello_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.hello_message)
  if (has_hello_message()) {
    clear_has_payload();
    ::HelloMessage* temp = payload_.hello_message_;
    payload_.hello_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlowMessage::set_allocated_hello_message(::HelloMessage* hello_message) {
  clear_payload();
  if (hello_message) {
    set_has_hello_message();
    payload_.hello_message_ = hello_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.hello_message)
}

// .DataMessage data_message = 3;
bool FlowMessage::has_data_message() const {
  return payload_case() == kDataMessage;
}
void FlowMessage::set_has_data_message() {
  _oneof_case_[0] = kDataMessage;
}
void FlowMessage::clear_data_message() {
  if (has_data_message()) {
    delete payload_.data_message_;
    clear_has_payload();
  }
}
 const ::DataMessage& FlowMessage::data_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.data_message)
  return has_data_message()
      ? *payload_.data_message_
      : ::DataMessage::default_instance();
}
::DataMessage* FlowMessage::mutable_data_message() {
  if (!has_data_message()) {
    clear_payload();
    set_has_data_message();
    payload_.data_message_ = new ::DataMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.data_message)
  return payload_.data_message_;
}
::DataMessage* FlowMessage::release_data_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.data_message)
  if (has_data_message()) {
    clear_has_payload();
    ::DataMessage* temp = payload_.data_message_;
    payload_.data_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlowMessage::set_allocated_data_message(::DataMessage* data_message) {
  clear_payload();
  if (data_message) {
    set_has_data_message();
    payload_.data_message_ = data_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.data_message)
}

// .StopMessage stop_message = 4;
bool FlowMessage::has_stop_message() const {
  return payload_case() == kStopMessage;
}
void FlowMessage::set_has_stop_message() {
  _oneof_case_[0] = kStopMessage;
}
void FlowMessage::clear_stop_message() {
  if (has_stop_message()) {
    delete payload_.stop_message_;
    clear_has_payload();
  }
}
 const ::StopMessage& FlowMessage::stop_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.stop_message)
  return has_stop_message()
      ? *payload_.stop_message_
      : ::StopMessage::default_instance();
}
::StopMessage* FlowMessage::mutable_stop_message() {
  if (!has_stop_message()) {
    clear_payload();
    set_has_stop_message();
    payload_.stop_message_ = new ::StopMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.stop_message)
  return payload_.stop_message_;
}
::StopMessage* FlowMessage::release_stop_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.stop_message)
  if (has_stop_message()) {
    clear_has_payload();
    ::StopMessage* temp = payload_.stop_message_;
    payload_.stop_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlowMessage::set_allocated_stop_message(::StopMessage* stop_message) {
  clear_payload();
  if (stop_message) {
    set_has_stop_message();
    payload_.stop_message_ = stop_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.stop_message)
}

// .ResetMessage reset_message = 5;
bool FlowMessage::has_reset_message() const {
  return payload_case() == kResetMessage;
}
void FlowMessage::set_has_reset_message() {
  _oneof_case_[0] = kResetMessage;
}
void FlowMessage::clear_reset_message() {
  if (has_reset_message()) {
    delete payload_.reset_message_;
    clear_has_payload();
  }
}
 const ::ResetMessage& FlowMessage::reset_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.reset_message)
  return has_reset_message()
      ? *payload_.reset_message_
      : ::ResetMessage::default_instance();
}
::ResetMessage* FlowMessage::mutable_reset_message() {
  if (!has_reset_message()) {
    clear_payload();
    set_has_reset_message();
    payload_.reset_message_ = new ::ResetMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.reset_message)
  return payload_.reset_message_;
}
::ResetMessage* FlowMessage::release_reset_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.reset_message)
  if (has_reset_message()) {
    clear_has_payload();
    ::ResetMessage* temp = payload_.reset_message_;
    payload_.reset_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void FlowMessage::set_allocated_reset_message(::ResetMessage* reset_message) {
  clear_payload();
  if (reset_message) {
    set_has_reset_message();
    payload_.reset_message_ = reset_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.reset_message)
}

bool FlowMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
void FlowMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
FlowMessage::PayloadCase FlowMessage::payload_case() const {
  return FlowMessage::PayloadCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloMessage::HelloMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:HelloMessage)
}

void HelloMessage::SharedCtor() {
  _cached_size_ = 0;
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:HelloMessage)
  SharedDtor();
}

void HelloMessage::SharedDtor() {
}

void HelloMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HelloMessage& HelloMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

HelloMessage* HelloMessage::New(::google::protobuf::Arena* arena) const {
  HelloMessage* n = new HelloMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:HelloMessage)
}

bool HelloMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HelloMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:HelloMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HelloMessage)
  return false;
#undef DO_
}

void HelloMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HelloMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:HelloMessage)
}

::google::protobuf::uint8* HelloMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HelloMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HelloMessage)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HelloMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HelloMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HelloMessage)
    MergeFrom(*source);
  }
}

void HelloMessage::MergeFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void HelloMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::Swap(HelloMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloMessage::InternalSwap(HelloMessage* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HelloMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigMessage::kConfigFieldNumber;
const int ConfigMessage::kSampleRateFieldNumber;
const int ConfigMessage::kCellIdFieldNumber;
const int ConfigMessage::kSlotsPerFrameFieldNumber;
const int ConfigMessage::kSsbScsFieldNumber;
const int ConfigMessage::kMibScsCommonFieldNumber;
const int ConfigMessage::kMibCoreset0IndexFieldNumber;
const int ConfigMessage::kMibSsbOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigMessage::ConfigMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConfigMessage)
}
ConfigMessage::ConfigMessage(const ConfigMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.config().size() > 0) {
    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  ::memcpy(&sample_rate_, &from.sample_rate_,
    reinterpret_cast<char*>(&mib_ssb_offset_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(mib_ssb_offset_));
  // @@protoc_insertion_point(copy_constructor:ConfigMessage)
}

void ConfigMessage::SharedCtor() {
  config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&mib_ssb_offset_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(mib_ssb_offset_));
  _cached_size_ = 0;
}

ConfigMessage::~ConfigMessage() {
  // @@protoc_insertion_point(destructor:ConfigMessage)
  SharedDtor();
}

void ConfigMessage::SharedDtor() {
  config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConfigMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConfigMessage& ConfigMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConfigMessage* ConfigMessage::New(::google::protobuf::Arena* arena) const {
  ConfigMessage* n = new ConfigMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ConfigMessage)
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&mib_ssb_offset_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(mib_ssb_offset_));
}

bool ConfigMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConfigMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ConfigMessage.config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sample_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cell_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slots_per_frame = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_per_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ssb_scs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssb_scs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mib_scs_common = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mib_scs_common_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mib_coreset0_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mib_coreset0_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mib_ssb_offset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mib_ssb_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConfigMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConfigMessage)
  return false;
#undef DO_
}

void ConfigMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConfigMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config = 1;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ConfigMessage.config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->config(), output);
  }

  // uint32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sample_rate(), output);
  }

  // uint32 cell_id = 3;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cell_id(), output);
  }

  // uint32 slots_per_frame = 4;
  if (this->slots_per_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slots_per_frame(), output);
  }

  // uint32 ssb_scs = 5;
  if (this->ssb_scs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ssb_scs(), output);
  }

  // uint32 mib_scs_common = 6;
  if (this->mib_scs_common() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mib_scs_common(), output);
  }

  // uint32 mib_coreset0_index = 7;
  if (this->mib_coreset0_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mib_coreset0_index(), output);
  }

  // uint32 mib_ssb_offset = 8;
  if (this->mib_ssb_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mib_ssb_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:ConfigMessage)
}

::google::protobuf::uint8* ConfigMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConfigMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string config = 1;
  if (this->config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ConfigMessage.config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->config(), target);
  }

  // uint32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sample_rate(), target);
  }

  // uint32 cell_id = 3;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cell_id(), target);
  }

  // uint32 slots_per_frame = 4;
  if (this->slots_per_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slots_per_frame(), target);
  }

  // uint32 ssb_scs = 5;
  if (this->ssb_scs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ssb_scs(), target);
  }

  // uint32 mib_scs_common = 6;
  if (this->mib_scs_common() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mib_scs_common(), target);
  }

  // uint32 mib_coreset0_index = 7;
  if (this->mib_coreset0_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mib_coreset0_index(), target);
  }

  // uint32 mib_ssb_offset = 8;
  if (this->mib_ssb_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->mib_ssb_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ConfigMessage)
  return target;
}

size_t ConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConfigMessage)
  size_t total_size = 0;

  // string config = 1;
  if (this->config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->config());
  }

  // uint32 sample_rate = 2;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sample_rate());
  }

  // uint32 cell_id = 3;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_id());
  }

  // uint32 slots_per_frame = 4;
  if (this->slots_per_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slots_per_frame());
  }

  // uint32 ssb_scs = 5;
  if (this->ssb_scs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ssb_scs());
  }

  // uint32 mib_scs_common = 6;
  if (this->mib_scs_common() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mib_scs_common());
  }

  // uint32 mib_coreset0_index = 7;
  if (this->mib_coreset0_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mib_coreset0_index());
  }

  // uint32 mib_ssb_offset = 8;
  if (this->mib_ssb_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mib_ssb_offset());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConfigMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConfigMessage)
    MergeFrom(*source);
  }
}

void ConfigMessage::MergeFrom(const ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config().size() > 0) {

    config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_);
  }
  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
  if (from.slots_per_frame() != 0) {
    set_slots_per_frame(from.slots_per_frame());
  }
  if (from.ssb_scs() != 0) {
    set_ssb_scs(from.ssb_scs());
  }
  if (from.mib_scs_common() != 0) {
    set_mib_scs_common(from.mib_scs_common());
  }
  if (from.mib_coreset0_index() != 0) {
    set_mib_coreset0_index(from.mib_coreset0_index());
  }
  if (from.mib_ssb_offset() != 0) {
    set_mib_ssb_offset(from.mib_ssb_offset());
  }
}

void ConfigMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigMessage::CopyFrom(const ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigMessage::IsInitialized() const {
  return true;
}

void ConfigMessage::Swap(ConfigMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigMessage::InternalSwap(ConfigMessage* other) {
  config_.Swap(&other->config_);
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(slots_per_frame_, other->slots_per_frame_);
  std::swap(ssb_scs_, other->ssb_scs_);
  std::swap(mib_scs_common_, other->mib_scs_common_);
  std::swap(mib_coreset0_index_, other->mib_coreset0_index_);
  std::swap(mib_ssb_offset_, other->mib_ssb_offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigMessage

// string config = 1;
void ConfigMessage::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ConfigMessage::config() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.config)
  return config_.GetNoArena();
}
void ConfigMessage::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigMessage.config)
}
#if LANG_CXX11
void ConfigMessage::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigMessage.config)
}
#endif
void ConfigMessage::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigMessage.config)
}
void ConfigMessage::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigMessage.config)
}
::std::string* ConfigMessage::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ConfigMessage.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConfigMessage::release_config() {
  // @@protoc_insertion_point(field_release:ConfigMessage.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConfigMessage::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ConfigMessage.config)
}

// uint32 sample_rate = 2;
void ConfigMessage::clear_sample_rate() {
  sample_rate_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::sample_rate() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.sample_rate)
  return sample_rate_;
}
void ConfigMessage::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.sample_rate)
}

// uint32 cell_id = 3;
void ConfigMessage::clear_cell_id() {
  cell_id_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::cell_id() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.cell_id)
  return cell_id_;
}
void ConfigMessage::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.cell_id)
}

// uint32 slots_per_frame = 4;
void ConfigMessage::clear_slots_per_frame() {
  slots_per_frame_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::slots_per_frame() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.slots_per_frame)
  return slots_per_frame_;
}
void ConfigMessage::set_slots_per_frame(::google::protobuf::uint32 value) {
  
  slots_per_frame_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.slots_per_frame)
}

// uint32 ssb_scs = 5;
void ConfigMessage::clear_ssb_scs() {
  ssb_scs_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::ssb_scs() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.ssb_scs)
  return ssb_scs_;
}
void ConfigMessage::set_ssb_scs(::google::protobuf::uint32 value) {
  
  ssb_scs_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.ssb_scs)
}

// uint32 mib_scs_common = 6;
void ConfigMessage::clear_mib_scs_common() {
  mib_scs_common_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::mib_scs_common() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_scs_common)
  return mib_scs_common_;
}
void ConfigMessage::set_mib_scs_common(::google::protobuf::uint32 value) {
  
  mib_scs_common_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_scs_common)
}

// uint32 mib_coreset0_index = 7;
void ConfigMessage::clear_mib_coreset0_index() {
  mib_coreset0_index_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::mib_coreset0_index() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_coreset0_index)
  return mib_coreset0_index_;
}
void ConfigMessage::set_mib_coreset0_index(::google::protobuf::uint32 value) {
  
  mib_coreset0_index_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_coreset0_index)
}

// uint32 mib_ssb_offset = 8;
void ConfigMessage::clear_mib_ssb_offset() {
  mib_ssb_offset_ = 0u;
}
::google::protobuf::uint32 ConfigMessage::mib_ssb_offset() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_ssb_offset)
  return mib_ssb_offset_;
}
void ConfigMessage::set_mib_ssb_offset(::google::protobuf::uint32 value) {
  
  mib_ssb_offset_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_ssb_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataMessage::DataMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataMessage)
}
DataMessage::DataMessage(const DataMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:DataMessage)
}

void DataMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DataMessage::~DataMessage() {
  // @@protoc_insertion_point(destructor:DataMessage)
  SharedDtor();
}

void DataMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataMessage& DataMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataMessage* DataMessage::New(::google::protobuf::Arena* arena) const {
  DataMessage* n = new DataMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DataMessage)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DataMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DataMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DataMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DataMessage)
  return false;
#undef DO_
}

void DataMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:DataMessage)
}

::google::protobuf::uint8* DataMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DataMessage)
  return target;
}

size_t DataMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataMessage)
  size_t total_size = 0;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataMessage)
    MergeFrom(*source);
  }
}

void DataMessage::MergeFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void DataMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMessage::CopyFrom(const DataMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMessage::IsInitialized() const {
  return true;
}

void DataMessage::Swap(DataMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataMessage::InternalSwap(DataMessage* other) {
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataMessage

// bytes data = 1;
void DataMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataMessage::data() const {
  // @@protoc_insertion_point(field_get:DataMessage.data)
  return data_.GetNoArena();
}
void DataMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataMessage.data)
}
#if LANG_CXX11
void DataMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataMessage.data)
}
#endif
void DataMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataMessage.data)
}
void DataMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataMessage.data)
}
::std::string* DataMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:DataMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataMessage::release_data() {
  // @@protoc_insertion_point(field_release:DataMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:DataMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StopMessage::StopMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StopMessage)
}
StopMessage::StopMessage(const StopMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StopMessage)
}

void StopMessage::SharedCtor() {
  _cached_size_ = 0;
}

StopMessage::~StopMessage() {
  // @@protoc_insertion_point(destructor:StopMessage)
  SharedDtor();
}

void StopMessage::SharedDtor() {
}

void StopMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StopMessage& StopMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

StopMessage* StopMessage::New(::google::protobuf::Arena* arena) const {
  StopMessage* n = new StopMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StopMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StopMessage)
}

bool StopMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StopMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:StopMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StopMessage)
  return false;
#undef DO_
}

void StopMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StopMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:StopMessage)
}

::google::protobuf::uint8* StopMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StopMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:StopMessage)
  return target;
}

size_t StopMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StopMessage)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StopMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StopMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StopMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StopMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StopMessage)
    MergeFrom(*source);
  }
}

void StopMessage::MergeFrom(const StopMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StopMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StopMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMessage::CopyFrom(const StopMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StopMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMessage::IsInitialized() const {
  return true;
}

void StopMessage::Swap(StopMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StopMessage::InternalSwap(StopMessage* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StopMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StopMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetMessage::ResetMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetMessage)
}
ResetMessage::ResetMessage(const ResetMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResetMessage)
}

void ResetMessage::SharedCtor() {
  _cached_size_ = 0;
}

ResetMessage::~ResetMessage() {
  // @@protoc_insertion_point(destructor:ResetMessage)
  SharedDtor();
}

void ResetMessage::SharedDtor() {
}

void ResetMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetMessage::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetMessage& ResetMessage::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetMessage* ResetMessage::New(::google::protobuf::Arena* arena) const {
  ResetMessage* n = new ResetMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetMessage)
}

bool ResetMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:ResetMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetMessage)
  return false;
#undef DO_
}

void ResetMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:ResetMessage)
}

::google::protobuf::uint8* ResetMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ResetMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:ResetMessage)
  return target;
}

size_t ResetMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetMessage)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResetMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResetMessage)
    MergeFrom(*source);
  }
}

void ResetMessage::MergeFrom(const ResetMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetMessage::CopyFrom(const ResetMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetMessage::IsInitialized() const {
  return true;
}

void ResetMessage::Swap(ResetMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetMessage::InternalSwap(ResetMessage* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetMessage::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kFileSinkConfigFieldNumber;
const int Config::kChannelMapperConfigFieldNumber;
const int Config::kRotatorConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kFileSinkConfig: {
      mutable_file_sink_config()->::FileSinkConfig::MergeFrom(from.file_sink_config());
      break;
    }
    case kChannelMapperConfig: {
      mutable_channel_mapper_config()->::ChannelMapperConfig::MergeFrom(from.channel_mapper_config());
      break;
    }
    case kRotatorConfig: {
      mutable_rotator_config()->::RotatorConfig::MergeFrom(from.rotator_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Config)
}

void Config::SharedCtor() {
  clear_has_config();
  _cached_size_ = 0;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (has_config()) {
    clear_config();
  }
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:Config)
  switch (config_case()) {
    case kFileSinkConfig: {
      delete config_.file_sink_config_;
      break;
    }
    case kChannelMapperConfig: {
      delete config_.channel_mapper_config_;
      break;
    }
    case kRotatorConfig: {
      delete config_.rotator_config_;
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:Config)
  clear_config();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .FileSinkConfig file_sink_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_sink_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ChannelMapperConfig channel_mapper_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_mapper_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .RotatorConfig rotator_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotator_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileSinkConfig file_sink_config = 1;
  if (has_file_sink_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *config_.file_sink_config_, output);
  }

  // .ChannelMapperConfig channel_mapper_config = 2;
  if (has_channel_mapper_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *config_.channel_mapper_config_, output);
  }

  // .RotatorConfig rotator_config = 3;
  if (has_rotator_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *config_.rotator_config_, output);
  }

  // @@protoc_insertion_point(serialize_end:Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .FileSinkConfig file_sink_config = 1;
  if (has_file_sink_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *config_.file_sink_config_, deterministic, target);
  }

  // .ChannelMapperConfig channel_mapper_config = 2;
  if (has_channel_mapper_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *config_.channel_mapper_config_, deterministic, target);
  }

  // .RotatorConfig rotator_config = 3;
  if (has_rotator_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *config_.rotator_config_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Config)
  size_t total_size = 0;

  switch (config_case()) {
    // .FileSinkConfig file_sink_config = 1;
    case kFileSinkConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.file_sink_config_);
      break;
    }
    // .ChannelMapperConfig channel_mapper_config = 2;
    case kChannelMapperConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.channel_mapper_config_);
      break;
    }
    // .RotatorConfig rotator_config = 3;
    case kRotatorConfig: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *config_.rotator_config_);
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kFileSinkConfig: {
      mutable_file_sink_config()->::FileSinkConfig::MergeFrom(from.file_sink_config());
      break;
    }
    case kChannelMapperConfig: {
      mutable_channel_mapper_config()->::ChannelMapperConfig::MergeFrom(from.channel_mapper_config());
      break;
    }
    case kRotatorConfig: {
      mutable_rotator_config()->::RotatorConfig::MergeFrom(from.rotator_config());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  std::swap(config_, other->config_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// .FileSinkConfig file_sink_config = 1;
bool Config::has_file_sink_config() const {
  return config_case() == kFileSinkConfig;
}
void Config::set_has_file_sink_config() {
  _oneof_case_[0] = kFileSinkConfig;
}
void Config::clear_file_sink_config() {
  if (has_file_sink_config()) {
    delete config_.file_sink_config_;
    clear_has_config();
  }
}
 const ::FileSinkConfig& Config::file_sink_config() const {
  // @@protoc_insertion_point(field_get:Config.file_sink_config)
  return has_file_sink_config()
      ? *config_.file_sink_config_
      : ::FileSinkConfig::default_instance();
}
::FileSinkConfig* Config::mutable_file_sink_config() {
  if (!has_file_sink_config()) {
    clear_config();
    set_has_file_sink_config();
    config_.file_sink_config_ = new ::FileSinkConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.file_sink_config)
  return config_.file_sink_config_;
}
::FileSinkConfig* Config::release_file_sink_config() {
  // @@protoc_insertion_point(field_release:Config.file_sink_config)
  if (has_file_sink_config()) {
    clear_has_config();
    ::FileSinkConfig* temp = config_.file_sink_config_;
    config_.file_sink_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_file_sink_config(::FileSinkConfig* file_sink_config) {
  clear_config();
  if (file_sink_config) {
    set_has_file_sink_config();
    config_.file_sink_config_ = file_sink_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.file_sink_config)
}

// .ChannelMapperConfig channel_mapper_config = 2;
bool Config::has_channel_mapper_config() const {
  return config_case() == kChannelMapperConfig;
}
void Config::set_has_channel_mapper_config() {
  _oneof_case_[0] = kChannelMapperConfig;
}
void Config::clear_channel_mapper_config() {
  if (has_channel_mapper_config()) {
    delete config_.channel_mapper_config_;
    clear_has_config();
  }
}
 const ::ChannelMapperConfig& Config::channel_mapper_config() const {
  // @@protoc_insertion_point(field_get:Config.channel_mapper_config)
  return has_channel_mapper_config()
      ? *config_.channel_mapper_config_
      : ::ChannelMapperConfig::default_instance();
}
::ChannelMapperConfig* Config::mutable_channel_mapper_config() {
  if (!has_channel_mapper_config()) {
    clear_config();
    set_has_channel_mapper_config();
    config_.channel_mapper_config_ = new ::ChannelMapperConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.channel_mapper_config)
  return config_.channel_mapper_config_;
}
::ChannelMapperConfig* Config::release_channel_mapper_config() {
  // @@protoc_insertion_point(field_release:Config.channel_mapper_config)
  if (has_channel_mapper_config()) {
    clear_has_config();
    ::ChannelMapperConfig* temp = config_.channel_mapper_config_;
    config_.channel_mapper_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_channel_mapper_config(::ChannelMapperConfig* channel_mapper_config) {
  clear_config();
  if (channel_mapper_config) {
    set_has_channel_mapper_config();
    config_.channel_mapper_config_ = channel_mapper_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.channel_mapper_config)
}

// .RotatorConfig rotator_config = 3;
bool Config::has_rotator_config() const {
  return config_case() == kRotatorConfig;
}
void Config::set_has_rotator_config() {
  _oneof_case_[0] = kRotatorConfig;
}
void Config::clear_rotator_config() {
  if (has_rotator_config()) {
    delete config_.rotator_config_;
    clear_has_config();
  }
}
 const ::RotatorConfig& Config::rotator_config() const {
  // @@protoc_insertion_point(field_get:Config.rotator_config)
  return has_rotator_config()
      ? *config_.rotator_config_
      : ::RotatorConfig::default_instance();
}
::RotatorConfig* Config::mutable_rotator_config() {
  if (!has_rotator_config()) {
    clear_config();
    set_has_rotator_config();
    config_.rotator_config_ = new ::RotatorConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.rotator_config)
  return config_.rotator_config_;
}
::RotatorConfig* Config::release_rotator_config() {
  // @@protoc_insertion_point(field_release:Config.rotator_config)
  if (has_rotator_config()) {
    clear_has_config();
    ::RotatorConfig* temp = config_.rotator_config_;
    config_.rotator_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Config::set_allocated_rotator_config(::RotatorConfig* rotator_config) {
  clear_config();
  if (rotator_config) {
    set_has_rotator_config();
    config_.rotator_config_ = rotator_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.rotator_config)
}

bool Config::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
void Config::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
Config::ConfigCase Config::config_case() const {
  return Config::ConfigCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileSinkConfig::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileSinkConfig::FileSinkConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:FileSinkConfig)
}
FileSinkConfig::FileSinkConfig(const FileSinkConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:FileSinkConfig)
}

void FileSinkConfig::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileSinkConfig::~FileSinkConfig() {
  // @@protoc_insertion_point(destructor:FileSinkConfig)
  SharedDtor();
}

void FileSinkConfig::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileSinkConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileSinkConfig::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileSinkConfig& FileSinkConfig::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileSinkConfig* FileSinkConfig::New(::google::protobuf::Arena* arena) const {
  FileSinkConfig* n = new FileSinkConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileSinkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:FileSinkConfig)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileSinkConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FileSinkConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FileSinkConfig.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FileSinkConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FileSinkConfig)
  return false;
#undef DO_
}

void FileSinkConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FileSinkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileSinkConfig.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:FileSinkConfig)
}

::google::protobuf::uint8* FileSinkConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FileSinkConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FileSinkConfig.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FileSinkConfig)
  return target;
}

size_t FileSinkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FileSinkConfig)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileSinkConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FileSinkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FileSinkConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileSinkConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FileSinkConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FileSinkConfig)
    MergeFrom(*source);
  }
}

void FileSinkConfig::MergeFrom(const FileSinkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FileSinkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileSinkConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FileSinkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileSinkConfig::CopyFrom(const FileSinkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FileSinkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileSinkConfig::IsInitialized() const {
  return true;
}

void FileSinkConfig::Swap(FileSinkConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileSinkConfig::InternalSwap(FileSinkConfig* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileSinkConfig::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileSinkConfig

// string path = 1;
void FileSinkConfig::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileSinkConfig::path() const {
  // @@protoc_insertion_point(field_get:FileSinkConfig.path)
  return path_.GetNoArena();
}
void FileSinkConfig::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileSinkConfig.path)
}
#if LANG_CXX11
void FileSinkConfig::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileSinkConfig.path)
}
#endif
void FileSinkConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileSinkConfig.path)
}
void FileSinkConfig::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileSinkConfig.path)
}
::std::string* FileSinkConfig::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:FileSinkConfig.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileSinkConfig::release_path() {
  // @@protoc_insertion_point(field_release:FileSinkConfig.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileSinkConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:FileSinkConfig.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelMapperConfig::kCellIdFieldNumber;
const int ChannelMapperConfig::kSlotsPerFrameFieldNumber;
const int ChannelMapperConfig::kSubcarrierOffsetFieldNumber;
const int ChannelMapperConfig::kScramblingIdStartFieldNumber;
const int ChannelMapperConfig::kScramblingIdEndFieldNumber;
const int ChannelMapperConfig::kRntiStartFieldNumber;
const int ChannelMapperConfig::kRntiEndFieldNumber;
const int ChannelMapperConfig::kDciSizesListFieldNumber;
const int ChannelMapperConfig::kAlCorrThresholdsFieldNumber;
const int ChannelMapperConfig::kMaxRntiQueueSizeFieldNumber;
const int ChannelMapperConfig::kScPowerDecisionFieldNumber;
const int ChannelMapperConfig::kNumCandidatesPerAlFieldNumber;
const int ChannelMapperConfig::kCoresetIdFieldNumber;
const int ChannelMapperConfig::kNumPrbsFieldNumber;
const int ChannelMapperConfig::kCoresetDurationFieldNumber;
const int ChannelMapperConfig::kCoresetInterleavingPatternFieldNumber;
const int ChannelMapperConfig::kCoresetRegBundleSizeFieldNumber;
const int ChannelMapperConfig::kCoresetInterleaverSizeFieldNumber;
const int ChannelMapperConfig::kCoresetNshiftFieldNumber;
const int ChannelMapperConfig::kCoresetOfdmSymbolStartFieldNumber;
const int ChannelMapperConfig::kNumSymbolsPerSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelMapperConfig::ChannelMapperConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChannelMapperConfig)
}
ChannelMapperConfig::ChannelMapperConfig(const ChannelMapperConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dci_sizes_list_(from.dci_sizes_list_),
      al_corr_thresholds_(from.al_corr_thresholds_),
      num_candidates_per_al_(from.num_candidates_per_al_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  coreset_interleaving_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.coreset_interleaving_pattern().size() > 0) {
    coreset_interleaving_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coreset_interleaving_pattern_);
  }
  ::memcpy(&cell_id_, &from.cell_id_,
    reinterpret_cast<char*>(&num_symbols_per_slot_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(num_symbols_per_slot_));
  // @@protoc_insertion_point(copy_constructor:ChannelMapperConfig)
}

void ChannelMapperConfig::SharedCtor() {
  coreset_interleaving_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cell_id_, 0, reinterpret_cast<char*>(&num_symbols_per_slot_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(num_symbols_per_slot_));
  _cached_size_ = 0;
}

ChannelMapperConfig::~ChannelMapperConfig() {
  // @@protoc_insertion_point(destructor:ChannelMapperConfig)
  SharedDtor();
}

void ChannelMapperConfig::SharedDtor() {
  coreset_interleaving_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChannelMapperConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMapperConfig::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelMapperConfig& ChannelMapperConfig::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelMapperConfig* ChannelMapperConfig::New(::google::protobuf::Arena* arena) const {
  ChannelMapperConfig* n = new ChannelMapperConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelMapperConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ChannelMapperConfig)
  dci_sizes_list_.Clear();
  al_corr_thresholds_.Clear();
  num_candidates_per_al_.Clear();
  coreset_interleaving_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cell_id_, 0, reinterpret_cast<char*>(&num_symbols_per_slot_) -
    reinterpret_cast<char*>(&cell_id_) + sizeof(num_symbols_per_slot_));
}

bool ChannelMapperConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChannelMapperConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cell_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cell_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slots_per_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slots_per_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subcarrier_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcarrier_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scrambling_id_start = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrambling_id_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scrambling_id_end = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scrambling_id_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rnti_start = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rnti_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rnti_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 dci_sizes_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dci_sizes_list())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_dci_sizes_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float al_corr_thresholds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_al_corr_thresholds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(77u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74u, input, this->mutable_al_corr_thresholds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_rnti_queue_size = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rnti_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sc_power_decision = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sc_power_decision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 num_candidates_per_al = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_num_candidates_per_al())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_num_candidates_per_al())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_prbs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_prbs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_duration = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string coreset_interleaving_pattern = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coreset_interleaving_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coreset_interleaving_pattern().data(), this->coreset_interleaving_pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChannelMapperConfig.coreset_interleaving_pattern"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_reg_bundle_size = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_reg_bundle_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_interleaver_size = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_interleaver_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_nshift = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_nshift_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coreset_ofdm_symbol_start = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coreset_ofdm_symbol_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_symbols_per_slot = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_symbols_per_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChannelMapperConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChannelMapperConfig)
  return false;
#undef DO_
}

void ChannelMapperConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChannelMapperConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cell_id(), output);
  }

  // uint32 slots_per_frame = 2;
  if (this->slots_per_frame() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slots_per_frame(), output);
  }

  // int32 subcarrier_offset = 3;
  if (this->subcarrier_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subcarrier_offset(), output);
  }

  // uint32 scrambling_id_start = 4;
  if (this->scrambling_id_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scrambling_id_start(), output);
  }

  // uint32 scrambling_id_end = 5;
  if (this->scrambling_id_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scrambling_id_end(), output);
  }

  // uint32 rnti_start = 6;
  if (this->rnti_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rnti_start(), output);
  }

  // uint32 rnti_end = 7;
  if (this->rnti_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rnti_end(), output);
  }

  // repeated uint32 dci_sizes_list = 8;
  if (this->dci_sizes_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dci_sizes_list_cached_byte_size_);
  }
  for (int i = 0, n = this->dci_sizes_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->dci_sizes_list(i), output);
  }

  // repeated float al_corr_thresholds = 9;
  if (this->al_corr_thresholds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_al_corr_thresholds_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->al_corr_thresholds().data(), this->al_corr_thresholds_size(), output);
  }

  // uint32 max_rnti_queue_size = 10;
  if (this->max_rnti_queue_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_rnti_queue_size(), output);
  }

  // bool sc_power_decision = 11;
  if (this->sc_power_decision() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sc_power_decision(), output);
  }

  // repeated uint32 num_candidates_per_al = 12;
  if (this->num_candidates_per_al_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_num_candidates_per_al_cached_byte_size_);
  }
  for (int i = 0, n = this->num_candidates_per_al_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->num_candidates_per_al(i), output);
  }

  // uint32 coreset_id = 13;
  if (this->coreset_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->coreset_id(), output);
  }

  // uint32 num_prbs = 14;
  if (this->num_prbs() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->num_prbs(), output);
  }

  // uint32 coreset_duration = 15;
  if (this->coreset_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->coreset_duration(), output);
  }

  // string coreset_interleaving_pattern = 16;
  if (this->coreset_interleaving_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coreset_interleaving_pattern().data(), this->coreset_interleaving_pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelMapperConfig.coreset_interleaving_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->coreset_interleaving_pattern(), output);
  }

  // uint32 coreset_reg_bundle_size = 17;
  if (this->coreset_reg_bundle_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->coreset_reg_bundle_size(), output);
  }

  // uint32 coreset_interleaver_size = 18;
  if (this->coreset_interleaver_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->coreset_interleaver_size(), output);
  }

  // uint32 coreset_nshift = 19;
  if (this->coreset_nshift() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->coreset_nshift(), output);
  }

  // uint32 coreset_ofdm_symbol_start = 20;
  if (this->coreset_ofdm_symbol_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->coreset_ofdm_symbol_start(), output);
  }

  // uint32 num_symbols_per_slot = 21;
  if (this->num_symbols_per_slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->num_symbols_per_slot(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChannelMapperConfig)
}

::google::protobuf::uint8* ChannelMapperConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChannelMapperConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cell_id(), target);
  }

  // uint32 slots_per_frame = 2;
  if (this->slots_per_frame() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slots_per_frame(), target);
  }

  // int32 subcarrier_offset = 3;
  if (this->subcarrier_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subcarrier_offset(), target);
  }

  // uint32 scrambling_id_start = 4;
  if (this->scrambling_id_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scrambling_id_start(), target);
  }

  // uint32 scrambling_id_end = 5;
  if (this->scrambling_id_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scrambling_id_end(), target);
  }

  // uint32 rnti_start = 6;
  if (this->rnti_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rnti_start(), target);
  }

  // uint32 rnti_end = 7;
  if (this->rnti_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rnti_end(), target);
  }

  // repeated uint32 dci_sizes_list = 8;
  if (this->dci_sizes_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dci_sizes_list_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->dci_sizes_list_, target);
  }

  // repeated float al_corr_thresholds = 9;
  if (this->al_corr_thresholds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _al_corr_thresholds_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->al_corr_thresholds_, target);
  }

  // uint32 max_rnti_queue_size = 10;
  if (this->max_rnti_queue_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_rnti_queue_size(), target);
  }

  // bool sc_power_decision = 11;
  if (this->sc_power_decision() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->sc_power_decision(), target);
  }

  // repeated uint32 num_candidates_per_al = 12;
  if (this->num_candidates_per_al_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _num_candidates_per_al_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->num_candidates_per_al_, target);
  }

  // uint32 coreset_id = 13;
  if (this->coreset_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->coreset_id(), target);
  }

  // uint32 num_prbs = 14;
  if (this->num_prbs() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->num_prbs(), target);
  }

  // uint32 coreset_duration = 15;
  if (this->coreset_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->coreset_duration(), target);
  }

  // string coreset_interleaving_pattern = 16;
  if (this->coreset_interleaving_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coreset_interleaving_pattern().data(), this->coreset_interleaving_pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChannelMapperConfig.coreset_interleaving_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->coreset_interleaving_pattern(), target);
  }

  // uint32 coreset_reg_bundle_size = 17;
  if (this->coreset_reg_bundle_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->coreset_reg_bundle_size(), target);
  }

  // uint32 coreset_interleaver_size = 18;
  if (this->coreset_interleaver_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->coreset_interleaver_size(), target);
  }

  // uint32 coreset_nshift = 19;
  if (this->coreset_nshift() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->coreset_nshift(), target);
  }

  // uint32 coreset_ofdm_symbol_start = 20;
  if (this->coreset_ofdm_symbol_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->coreset_ofdm_symbol_start(), target);
  }

  // uint32 num_symbols_per_slot = 21;
  if (this->num_symbols_per_slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->num_symbols_per_slot(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChannelMapperConfig)
  return target;
}

size_t ChannelMapperConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChannelMapperConfig)
  size_t total_size = 0;

  // repeated uint32 dci_sizes_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dci_sizes_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dci_sizes_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float al_corr_thresholds = 9;
  {
    unsigned int count = this->al_corr_thresholds_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _al_corr_thresholds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 num_candidates_per_al = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->num_candidates_per_al_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _num_candidates_per_al_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string coreset_interleaving_pattern = 16;
  if (this->coreset_interleaving_pattern().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coreset_interleaving_pattern());
  }

  // uint32 cell_id = 1;
  if (this->cell_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cell_id());
  }

  // uint32 slots_per_frame = 2;
  if (this->slots_per_frame() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slots_per_frame());
  }

  // int32 subcarrier_offset = 3;
  if (this->subcarrier_offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subcarrier_offset());
  }

  // uint32 scrambling_id_start = 4;
  if (this->scrambling_id_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scrambling_id_start());
  }

  // uint32 scrambling_id_end = 5;
  if (this->scrambling_id_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scrambling_id_end());
  }

  // uint32 rnti_start = 6;
  if (this->rnti_start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rnti_start());
  }

  // uint32 rnti_end = 7;
  if (this->rnti_end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rnti_end());
  }

  // uint32 max_rnti_queue_size = 10;
  if (this->max_rnti_queue_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_rnti_queue_size());
  }

  // bool sc_power_decision = 11;
  if (this->sc_power_decision() != 0) {
    total_size += 1 + 1;
  }

  // uint32 coreset_id = 13;
  if (this->coreset_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_id());
  }

  // uint32 num_prbs = 14;
  if (this->num_prbs() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_prbs());
  }

  // uint32 coreset_duration = 15;
  if (this->coreset_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_duration());
  }

  // uint32 coreset_reg_bundle_size = 17;
  if (this->coreset_reg_bundle_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_reg_bundle_size());
  }

  // uint32 coreset_interleaver_size = 18;
  if (this->coreset_interleaver_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_interleaver_size());
  }

  // uint32 coreset_nshift = 19;
  if (this->coreset_nshift() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_nshift());
  }

  // uint32 coreset_ofdm_symbol_start = 20;
  if (this->coreset_ofdm_symbol_start() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coreset_ofdm_symbol_start());
  }

  // uint32 num_symbols_per_slot = 21;
  if (this->num_symbols_per_slot() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_symbols_per_slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMapperConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChannelMapperConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMapperConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelMapperConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChannelMapperConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChannelMapperConfig)
    MergeFrom(*source);
  }
}

void ChannelMapperConfig::MergeFrom(const ChannelMapperConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChannelMapperConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dci_sizes_list_.MergeFrom(from.dci_sizes_list_);
  al_corr_thresholds_.MergeFrom(from.al_corr_thresholds_);
  num_candidates_per_al_.MergeFrom(from.num_candidates_per_al_);
  if (from.coreset_interleaving_pattern().size() > 0) {

    coreset_interleaving_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coreset_interleaving_pattern_);
  }
  if (from.cell_id() != 0) {
    set_cell_id(from.cell_id());
  }
  if (from.slots_per_frame() != 0) {
    set_slots_per_frame(from.slots_per_frame());
  }
  if (from.subcarrier_offset() != 0) {
    set_subcarrier_offset(from.subcarrier_offset());
  }
  if (from.scrambling_id_start() != 0) {
    set_scrambling_id_start(from.scrambling_id_start());
  }
  if (from.scrambling_id_end() != 0) {
    set_scrambling_id_end(from.scrambling_id_end());
  }
  if (from.rnti_start() != 0) {
    set_rnti_start(from.rnti_start());
  }
  if (from.rnti_end() != 0) {
    set_rnti_end(from.rnti_end());
  }
  if (from.max_rnti_queue_size() != 0) {
    set_max_rnti_queue_size(from.max_rnti_queue_size());
  }
  if (from.sc_power_decision() != 0) {
    set_sc_power_decision(from.sc_power_decision());
  }
  if (from.coreset_id() != 0) {
    set_coreset_id(from.coreset_id());
  }
  if (from.num_prbs() != 0) {
    set_num_prbs(from.num_prbs());
  }
  if (from.coreset_duration() != 0) {
    set_coreset_duration(from.coreset_duration());
  }
  if (from.coreset_reg_bundle_size() != 0) {
    set_coreset_reg_bundle_size(from.coreset_reg_bundle_size());
  }
  if (from.coreset_interleaver_size() != 0) {
    set_coreset_interleaver_size(from.coreset_interleaver_size());
  }
  if (from.coreset_nshift() != 0) {
    set_coreset_nshift(from.coreset_nshift());
  }
  if (from.coreset_ofdm_symbol_start() != 0) {
    set_coreset_ofdm_symbol_start(from.coreset_ofdm_symbol_start());
  }
  if (from.num_symbols_per_slot() != 0) {
    set_num_symbols_per_slot(from.num_symbols_per_slot());
  }
}

void ChannelMapperConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChannelMapperConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMapperConfig::CopyFrom(const ChannelMapperConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChannelMapperConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMapperConfig::IsInitialized() const {
  return true;
}

void ChannelMapperConfig::Swap(ChannelMapperConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelMapperConfig::InternalSwap(ChannelMapperConfig* other) {
  dci_sizes_list_.InternalSwap(&other->dci_sizes_list_);
  al_corr_thresholds_.InternalSwap(&other->al_corr_thresholds_);
  num_candidates_per_al_.InternalSwap(&other->num_candidates_per_al_);
  coreset_interleaving_pattern_.Swap(&other->coreset_interleaving_pattern_);
  std::swap(cell_id_, other->cell_id_);
  std::swap(slots_per_frame_, other->slots_per_frame_);
  std::swap(subcarrier_offset_, other->subcarrier_offset_);
  std::swap(scrambling_id_start_, other->scrambling_id_start_);
  std::swap(scrambling_id_end_, other->scrambling_id_end_);
  std::swap(rnti_start_, other->rnti_start_);
  std::swap(rnti_end_, other->rnti_end_);
  std::swap(max_rnti_queue_size_, other->max_rnti_queue_size_);
  std::swap(sc_power_decision_, other->sc_power_decision_);
  std::swap(coreset_id_, other->coreset_id_);
  std::swap(num_prbs_, other->num_prbs_);
  std::swap(coreset_duration_, other->coreset_duration_);
  std::swap(coreset_reg_bundle_size_, other->coreset_reg_bundle_size_);
  std::swap(coreset_interleaver_size_, other->coreset_interleaver_size_);
  std::swap(coreset_nshift_, other->coreset_nshift_);
  std::swap(coreset_ofdm_symbol_start_, other->coreset_ofdm_symbol_start_);
  std::swap(num_symbols_per_slot_, other->num_symbols_per_slot_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelMapperConfig::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelMapperConfig

// uint32 cell_id = 1;
void ChannelMapperConfig::clear_cell_id() {
  cell_id_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::cell_id() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.cell_id)
  return cell_id_;
}
void ChannelMapperConfig::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.cell_id)
}

// uint32 slots_per_frame = 2;
void ChannelMapperConfig::clear_slots_per_frame() {
  slots_per_frame_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::slots_per_frame() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.slots_per_frame)
  return slots_per_frame_;
}
void ChannelMapperConfig::set_slots_per_frame(::google::protobuf::uint32 value) {
  
  slots_per_frame_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.slots_per_frame)
}

// int32 subcarrier_offset = 3;
void ChannelMapperConfig::clear_subcarrier_offset() {
  subcarrier_offset_ = 0;
}
::google::protobuf::int32 ChannelMapperConfig::subcarrier_offset() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.subcarrier_offset)
  return subcarrier_offset_;
}
void ChannelMapperConfig::set_subcarrier_offset(::google::protobuf::int32 value) {
  
  subcarrier_offset_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.subcarrier_offset)
}

// uint32 scrambling_id_start = 4;
void ChannelMapperConfig::clear_scrambling_id_start() {
  scrambling_id_start_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::scrambling_id_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.scrambling_id_start)
  return scrambling_id_start_;
}
void ChannelMapperConfig::set_scrambling_id_start(::google::protobuf::uint32 value) {
  
  scrambling_id_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.scrambling_id_start)
}

// uint32 scrambling_id_end = 5;
void ChannelMapperConfig::clear_scrambling_id_end() {
  scrambling_id_end_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::scrambling_id_end() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.scrambling_id_end)
  return scrambling_id_end_;
}
void ChannelMapperConfig::set_scrambling_id_end(::google::protobuf::uint32 value) {
  
  scrambling_id_end_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.scrambling_id_end)
}

// uint32 rnti_start = 6;
void ChannelMapperConfig::clear_rnti_start() {
  rnti_start_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::rnti_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.rnti_start)
  return rnti_start_;
}
void ChannelMapperConfig::set_rnti_start(::google::protobuf::uint32 value) {
  
  rnti_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.rnti_start)
}

// uint32 rnti_end = 7;
void ChannelMapperConfig::clear_rnti_end() {
  rnti_end_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::rnti_end() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.rnti_end)
  return rnti_end_;
}
void ChannelMapperConfig::set_rnti_end(::google::protobuf::uint32 value) {
  
  rnti_end_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.rnti_end)
}

// repeated uint32 dci_sizes_list = 8;
int ChannelMapperConfig::dci_sizes_list_size() const {
  return dci_sizes_list_.size();
}
void ChannelMapperConfig::clear_dci_sizes_list() {
  dci_sizes_list_.Clear();
}
::google::protobuf::uint32 ChannelMapperConfig::dci_sizes_list(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.dci_sizes_list)
  return dci_sizes_list_.Get(index);
}
void ChannelMapperConfig::set_dci_sizes_list(int index, ::google::protobuf::uint32 value) {
  dci_sizes_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.dci_sizes_list)
}
void ChannelMapperConfig::add_dci_sizes_list(::google::protobuf::uint32 value) {
  dci_sizes_list_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.dci_sizes_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelMapperConfig::dci_sizes_list() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.dci_sizes_list)
  return dci_sizes_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelMapperConfig::mutable_dci_sizes_list() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.dci_sizes_list)
  return &dci_sizes_list_;
}

// repeated float al_corr_thresholds = 9;
int ChannelMapperConfig::al_corr_thresholds_size() const {
  return al_corr_thresholds_.size();
}
void ChannelMapperConfig::clear_al_corr_thresholds() {
  al_corr_thresholds_.Clear();
}
float ChannelMapperConfig::al_corr_thresholds(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.al_corr_thresholds)
  return al_corr_thresholds_.Get(index);
}
void ChannelMapperConfig::set_al_corr_thresholds(int index, float value) {
  al_corr_thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.al_corr_thresholds)
}
void ChannelMapperConfig::add_al_corr_thresholds(float value) {
  al_corr_thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.al_corr_thresholds)
}
const ::google::protobuf::RepeatedField< float >&
ChannelMapperConfig::al_corr_thresholds() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.al_corr_thresholds)
  return al_corr_thresholds_;
}
::google::protobuf::RepeatedField< float >*
ChannelMapperConfig::mutable_al_corr_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.al_corr_thresholds)
  return &al_corr_thresholds_;
}

// uint32 max_rnti_queue_size = 10;
void ChannelMapperConfig::clear_max_rnti_queue_size() {
  max_rnti_queue_size_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::max_rnti_queue_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.max_rnti_queue_size)
  return max_rnti_queue_size_;
}
void ChannelMapperConfig::set_max_rnti_queue_size(::google::protobuf::uint32 value) {
  
  max_rnti_queue_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.max_rnti_queue_size)
}

// bool sc_power_decision = 11;
void ChannelMapperConfig::clear_sc_power_decision() {
  sc_power_decision_ = false;
}
bool ChannelMapperConfig::sc_power_decision() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.sc_power_decision)
  return sc_power_decision_;
}
void ChannelMapperConfig::set_sc_power_decision(bool value) {
  
  sc_power_decision_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.sc_power_decision)
}

// repeated uint32 num_candidates_per_al = 12;
int ChannelMapperConfig::num_candidates_per_al_size() const {
  return num_candidates_per_al_.size();
}
void ChannelMapperConfig::clear_num_candidates_per_al() {
  num_candidates_per_al_.Clear();
}
::google::protobuf::uint32 ChannelMapperConfig::num_candidates_per_al(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_candidates_per_al)
  return num_candidates_per_al_.Get(index);
}
void ChannelMapperConfig::set_num_candidates_per_al(int index, ::google::protobuf::uint32 value) {
  num_candidates_per_al_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_candidates_per_al)
}
void ChannelMapperConfig::add_num_candidates_per_al(::google::protobuf::uint32 value) {
  num_candidates_per_al_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.num_candidates_per_al)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelMapperConfig::num_candidates_per_al() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.num_candidates_per_al)
  return num_candidates_per_al_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelMapperConfig::mutable_num_candidates_per_al() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.num_candidates_per_al)
  return &num_candidates_per_al_;
}

// uint32 coreset_id = 13;
void ChannelMapperConfig::clear_coreset_id() {
  coreset_id_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_id() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_id)
  return coreset_id_;
}
void ChannelMapperConfig::set_coreset_id(::google::protobuf::uint32 value) {
  
  coreset_id_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_id)
}

// uint32 num_prbs = 14;
void ChannelMapperConfig::clear_num_prbs() {
  num_prbs_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::num_prbs() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_prbs)
  return num_prbs_;
}
void ChannelMapperConfig::set_num_prbs(::google::protobuf::uint32 value) {
  
  num_prbs_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_prbs)
}

// uint32 coreset_duration = 15;
void ChannelMapperConfig::clear_coreset_duration() {
  coreset_duration_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_duration() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_duration)
  return coreset_duration_;
}
void ChannelMapperConfig::set_coreset_duration(::google::protobuf::uint32 value) {
  
  coreset_duration_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_duration)
}

// string coreset_interleaving_pattern = 16;
void ChannelMapperConfig::clear_coreset_interleaving_pattern() {
  coreset_interleaving_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ChannelMapperConfig::coreset_interleaving_pattern() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_interleaving_pattern)
  return coreset_interleaving_pattern_.GetNoArena();
}
void ChannelMapperConfig::set_coreset_interleaving_pattern(const ::std::string& value) {
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_interleaving_pattern)
}
#if LANG_CXX11
void ChannelMapperConfig::set_coreset_interleaving_pattern(::std::string&& value) {
  
  coreset_interleaving_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChannelMapperConfig.coreset_interleaving_pattern)
}
#endif
void ChannelMapperConfig::set_coreset_interleaving_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelMapperConfig.coreset_interleaving_pattern)
}
void ChannelMapperConfig::set_coreset_interleaving_pattern(const char* value, size_t size) {
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelMapperConfig.coreset_interleaving_pattern)
}
::std::string* ChannelMapperConfig::mutable_coreset_interleaving_pattern() {
  
  // @@protoc_insertion_point(field_mutable:ChannelMapperConfig.coreset_interleaving_pattern)
  return coreset_interleaving_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChannelMapperConfig::release_coreset_interleaving_pattern() {
  // @@protoc_insertion_point(field_release:ChannelMapperConfig.coreset_interleaving_pattern)
  
  return coreset_interleaving_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChannelMapperConfig::set_allocated_coreset_interleaving_pattern(::std::string* coreset_interleaving_pattern) {
  if (coreset_interleaving_pattern != NULL) {
    
  } else {
    
  }
  coreset_interleaving_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coreset_interleaving_pattern);
  // @@protoc_insertion_point(field_set_allocated:ChannelMapperConfig.coreset_interleaving_pattern)
}

// uint32 coreset_reg_bundle_size = 17;
void ChannelMapperConfig::clear_coreset_reg_bundle_size() {
  coreset_reg_bundle_size_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_reg_bundle_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_reg_bundle_size)
  return coreset_reg_bundle_size_;
}
void ChannelMapperConfig::set_coreset_reg_bundle_size(::google::protobuf::uint32 value) {
  
  coreset_reg_bundle_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_reg_bundle_size)
}

// uint32 coreset_interleaver_size = 18;
void ChannelMapperConfig::clear_coreset_interleaver_size() {
  coreset_interleaver_size_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_interleaver_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_interleaver_size)
  return coreset_interleaver_size_;
}
void ChannelMapperConfig::set_coreset_interleaver_size(::google::protobuf::uint32 value) {
  
  coreset_interleaver_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_interleaver_size)
}

// uint32 coreset_nshift = 19;
void ChannelMapperConfig::clear_coreset_nshift() {
  coreset_nshift_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_nshift() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_nshift)
  return coreset_nshift_;
}
void ChannelMapperConfig::set_coreset_nshift(::google::protobuf::uint32 value) {
  
  coreset_nshift_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_nshift)
}

// uint32 coreset_ofdm_symbol_start = 20;
void ChannelMapperConfig::clear_coreset_ofdm_symbol_start() {
  coreset_ofdm_symbol_start_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::coreset_ofdm_symbol_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_ofdm_symbol_start)
  return coreset_ofdm_symbol_start_;
}
void ChannelMapperConfig::set_coreset_ofdm_symbol_start(::google::protobuf::uint32 value) {
  
  coreset_ofdm_symbol_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_ofdm_symbol_start)
}

// uint32 num_symbols_per_slot = 21;
void ChannelMapperConfig::clear_num_symbols_per_slot() {
  num_symbols_per_slot_ = 0u;
}
::google::protobuf::uint32 ChannelMapperConfig::num_symbols_per_slot() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_symbols_per_slot)
  return num_symbols_per_slot_;
}
void ChannelMapperConfig::set_num_symbols_per_slot(::google::protobuf::uint32 value) {
  
  num_symbols_per_slot_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_symbols_per_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RotatorConfig::kSampleRateFieldNumber;
const int RotatorConfig::kFrequencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RotatorConfig::RotatorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2fprotocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RotatorConfig)
}
RotatorConfig::RotatorConfig(const RotatorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_rate_, &from.sample_rate_,
    reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(frequency_));
  // @@protoc_insertion_point(copy_constructor:RotatorConfig)
}

void RotatorConfig::SharedCtor() {
  ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(frequency_));
  _cached_size_ = 0;
}

RotatorConfig::~RotatorConfig() {
  // @@protoc_insertion_point(destructor:RotatorConfig)
  SharedDtor();
}

void RotatorConfig::SharedDtor() {
}

void RotatorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RotatorConfig::descriptor() {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RotatorConfig& RotatorConfig::default_instance() {
  protobuf_proto_2fprotocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

RotatorConfig* RotatorConfig::New(::google::protobuf::Arena* arena) const {
  RotatorConfig* n = new RotatorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RotatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RotatorConfig)
  ::memset(&sample_rate_, 0, reinterpret_cast<char*>(&frequency_) -
    reinterpret_cast<char*>(&sample_rate_) + sizeof(frequency_));
}

bool RotatorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RotatorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sample_rate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sample_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float frequency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RotatorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RotatorConfig)
  return false;
#undef DO_
}

void RotatorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RotatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_rate = 1;
  if (this->sample_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sample_rate(), output);
  }

  // float frequency = 2;
  if (this->frequency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->frequency(), output);
  }

  // @@protoc_insertion_point(serialize_end:RotatorConfig)
}

::google::protobuf::uint8* RotatorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RotatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sample_rate = 1;
  if (this->sample_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sample_rate(), target);
  }

  // float frequency = 2;
  if (this->frequency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->frequency(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:RotatorConfig)
  return target;
}

size_t RotatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RotatorConfig)
  size_t total_size = 0;

  // uint32 sample_rate = 1;
  if (this->sample_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sample_rate());
  }

  // float frequency = 2;
  if (this->frequency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RotatorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RotatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RotatorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RotatorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RotatorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RotatorConfig)
    MergeFrom(*source);
  }
}

void RotatorConfig::MergeFrom(const RotatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RotatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sample_rate() != 0) {
    set_sample_rate(from.sample_rate());
  }
  if (from.frequency() != 0) {
    set_frequency(from.frequency());
  }
}

void RotatorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RotatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotatorConfig::CopyFrom(const RotatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RotatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotatorConfig::IsInitialized() const {
  return true;
}

void RotatorConfig::Swap(RotatorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RotatorConfig::InternalSwap(RotatorConfig* other) {
  std::swap(sample_rate_, other->sample_rate_);
  std::swap(frequency_, other->frequency_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RotatorConfig::GetMetadata() const {
  protobuf_proto_2fprotocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fprotocol_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RotatorConfig

// uint32 sample_rate = 1;
void RotatorConfig::clear_sample_rate() {
  sample_rate_ = 0u;
}
::google::protobuf::uint32 RotatorConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:RotatorConfig.sample_rate)
  return sample_rate_;
}
void RotatorConfig::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:RotatorConfig.sample_rate)
}

// float frequency = 2;
void RotatorConfig::clear_frequency() {
  frequency_ = 0;
}
float RotatorConfig::frequency() const {
  // @@protoc_insertion_point(field_get:RotatorConfig.frequency)
  return frequency_;
}
void RotatorConfig::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:RotatorConfig.frequency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
