// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/protocol.proto

#ifndef PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
#define PROTOBUF_proto_2fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class ChannelMapperConfig;
class ChannelMapperConfigDefaultTypeInternal;
extern ChannelMapperConfigDefaultTypeInternal _ChannelMapperConfig_default_instance_;
class Config;
class ConfigDefaultTypeInternal;
extern ConfigDefaultTypeInternal _Config_default_instance_;
class ConfigMessage;
class ConfigMessageDefaultTypeInternal;
extern ConfigMessageDefaultTypeInternal _ConfigMessage_default_instance_;
class DataMessage;
class DataMessageDefaultTypeInternal;
extern DataMessageDefaultTypeInternal _DataMessage_default_instance_;
class FileSinkConfig;
class FileSinkConfigDefaultTypeInternal;
extern FileSinkConfigDefaultTypeInternal _FileSinkConfig_default_instance_;
class FlowMessage;
class FlowMessageDefaultTypeInternal;
extern FlowMessageDefaultTypeInternal _FlowMessage_default_instance_;
class HelloMessage;
class HelloMessageDefaultTypeInternal;
extern HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
class ResetMessage;
class ResetMessageDefaultTypeInternal;
extern ResetMessageDefaultTypeInternal _ResetMessage_default_instance_;
class RotatorConfig;
class RotatorConfigDefaultTypeInternal;
extern RotatorConfigDefaultTypeInternal _RotatorConfig_default_instance_;
class StopMessage;
class StopMessageDefaultTypeInternal;
extern StopMessageDefaultTypeInternal _StopMessage_default_instance_;

namespace protobuf_proto_2fprotocol_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2fprotocol_2eproto

enum MessageType {
  HELLO = 0,
  CONFIG = 1,
  DATA = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = HELLO;
const MessageType MessageType_MAX = DATA;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class FlowMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FlowMessage) */ {
 public:
  FlowMessage();
  virtual ~FlowMessage();

  FlowMessage(const FlowMessage& from);

  inline FlowMessage& operator=(const FlowMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowMessage& default_instance();

  enum PayloadCase {
    kHelloMessage = 2,
    kDataMessage = 3,
    kStopMessage = 4,
    kResetMessage = 5,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const FlowMessage* internal_default_instance() {
    return reinterpret_cast<const FlowMessage*>(
               &_FlowMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FlowMessage* other);

  // implements Message ----------------------------------------------

  inline FlowMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlowMessage& from);
  void MergeFrom(const FlowMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlowMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::MessageType type() const;
  void set_type(::MessageType value);

  // .HelloMessage hello_message = 2;
  bool has_hello_message() const;
  void clear_hello_message();
  static const int kHelloMessageFieldNumber = 2;
  const ::HelloMessage& hello_message() const;
  ::HelloMessage* mutable_hello_message();
  ::HelloMessage* release_hello_message();
  void set_allocated_hello_message(::HelloMessage* hello_message);

  // .DataMessage data_message = 3;
  bool has_data_message() const;
  void clear_data_message();
  static const int kDataMessageFieldNumber = 3;
  const ::DataMessage& data_message() const;
  ::DataMessage* mutable_data_message();
  ::DataMessage* release_data_message();
  void set_allocated_data_message(::DataMessage* data_message);

  // .StopMessage stop_message = 4;
  bool has_stop_message() const;
  void clear_stop_message();
  static const int kStopMessageFieldNumber = 4;
  const ::StopMessage& stop_message() const;
  ::StopMessage* mutable_stop_message();
  ::StopMessage* release_stop_message();
  void set_allocated_stop_message(::StopMessage* stop_message);

  // .ResetMessage reset_message = 5;
  bool has_reset_message() const;
  void clear_reset_message();
  static const int kResetMessageFieldNumber = 5;
  const ::ResetMessage& reset_message() const;
  ::ResetMessage* mutable_reset_message();
  ::ResetMessage* release_reset_message();
  void set_allocated_reset_message(::ResetMessage* reset_message);

  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:FlowMessage)
 private:
  void set_has_hello_message();
  void set_has_data_message();
  void set_has_stop_message();
  void set_has_reset_message();

  inline bool has_payload() const;
  void clear_payload();
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union PayloadUnion {
    PayloadUnion() {}
    ::HelloMessage* hello_message_;
    ::DataMessage* data_message_;
    ::StopMessage* stop_message_;
    ::ResetMessage* reset_message_;
  } payload_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HelloMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HelloMessage) */ {
 public:
  HelloMessage();
  virtual ~HelloMessage();

  HelloMessage(const HelloMessage& from);

  inline HelloMessage& operator=(const HelloMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloMessage& default_instance();

  static inline const HelloMessage* internal_default_instance() {
    return reinterpret_cast<const HelloMessage*>(
               &_HelloMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(HelloMessage* other);

  // implements Message ----------------------------------------------

  inline HelloMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  HelloMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HelloMessage& from);
  void MergeFrom(const HelloMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HelloMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:HelloMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfigMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ConfigMessage) */ {
 public:
  ConfigMessage();
  virtual ~ConfigMessage();

  ConfigMessage(const ConfigMessage& from);

  inline ConfigMessage& operator=(const ConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigMessage& default_instance();

  static inline const ConfigMessage* internal_default_instance() {
    return reinterpret_cast<const ConfigMessage*>(
               &_ConfigMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ConfigMessage* other);

  // implements Message ----------------------------------------------

  inline ConfigMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ConfigMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConfigMessage& from);
  void MergeFrom(const ConfigMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConfigMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string config = 1;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::std::string& config() const;
  void set_config(const ::std::string& value);
  #if LANG_CXX11
  void set_config(::std::string&& value);
  #endif
  void set_config(const char* value);
  void set_config(const char* value, size_t size);
  ::std::string* mutable_config();
  ::std::string* release_config();
  void set_allocated_config(::std::string* config);

  // uint32 sample_rate = 2;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 2;
  ::google::protobuf::uint32 sample_rate() const;
  void set_sample_rate(::google::protobuf::uint32 value);

  // uint32 cell_id = 3;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 3;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // uint32 slots_per_frame = 4;
  void clear_slots_per_frame();
  static const int kSlotsPerFrameFieldNumber = 4;
  ::google::protobuf::uint32 slots_per_frame() const;
  void set_slots_per_frame(::google::protobuf::uint32 value);

  // uint32 ssb_scs = 5;
  void clear_ssb_scs();
  static const int kSsbScsFieldNumber = 5;
  ::google::protobuf::uint32 ssb_scs() const;
  void set_ssb_scs(::google::protobuf::uint32 value);

  // uint32 mib_scs_common = 6;
  void clear_mib_scs_common();
  static const int kMibScsCommonFieldNumber = 6;
  ::google::protobuf::uint32 mib_scs_common() const;
  void set_mib_scs_common(::google::protobuf::uint32 value);

  // uint32 mib_coreset0_index = 7;
  void clear_mib_coreset0_index();
  static const int kMibCoreset0IndexFieldNumber = 7;
  ::google::protobuf::uint32 mib_coreset0_index() const;
  void set_mib_coreset0_index(::google::protobuf::uint32 value);

  // uint32 mib_ssb_offset = 8;
  void clear_mib_ssb_offset();
  static const int kMibSsbOffsetFieldNumber = 8;
  ::google::protobuf::uint32 mib_ssb_offset() const;
  void set_mib_ssb_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ConfigMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr config_;
  ::google::protobuf::uint32 sample_rate_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::uint32 slots_per_frame_;
  ::google::protobuf::uint32 ssb_scs_;
  ::google::protobuf::uint32 mib_scs_common_;
  ::google::protobuf::uint32 mib_coreset0_index_;
  ::google::protobuf::uint32 mib_ssb_offset_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DataMessage) */ {
 public:
  DataMessage();
  virtual ~DataMessage();

  DataMessage(const DataMessage& from);

  inline DataMessage& operator=(const DataMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataMessage& default_instance();

  static inline const DataMessage* internal_default_instance() {
    return reinterpret_cast<const DataMessage*>(
               &_DataMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DataMessage* other);

  // implements Message ----------------------------------------------

  inline DataMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  DataMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataMessage& from);
  void MergeFrom(const DataMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:DataMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StopMessage) */ {
 public:
  StopMessage();
  virtual ~StopMessage();

  StopMessage(const StopMessage& from);

  inline StopMessage& operator=(const StopMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopMessage& default_instance();

  static inline const StopMessage* internal_default_instance() {
    return reinterpret_cast<const StopMessage*>(
               &_StopMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StopMessage* other);

  // implements Message ----------------------------------------------

  inline StopMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  StopMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopMessage& from);
  void MergeFrom(const StopMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:StopMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResetMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResetMessage) */ {
 public:
  ResetMessage();
  virtual ~ResetMessage();

  ResetMessage(const ResetMessage& from);

  inline ResetMessage& operator=(const ResetMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResetMessage& default_instance();

  static inline const ResetMessage* internal_default_instance() {
    return reinterpret_cast<const ResetMessage*>(
               &_ResetMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ResetMessage* other);

  // implements Message ----------------------------------------------

  inline ResetMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ResetMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResetMessage& from);
  void MergeFrom(const ResetMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResetMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ResetMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Config) */ {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  enum ConfigCase {
    kFileSinkConfig = 1,
    kChannelMapperConfig = 2,
    kRotatorConfig = 3,
    CONFIG_NOT_SET = 0,
  };

  static inline const Config* internal_default_instance() {
    return reinterpret_cast<const Config*>(
               &_Config_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  inline Config* New() const PROTOBUF_FINAL { return New(NULL); }

  Config* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .FileSinkConfig file_sink_config = 1;
  bool has_file_sink_config() const;
  void clear_file_sink_config();
  static const int kFileSinkConfigFieldNumber = 1;
  const ::FileSinkConfig& file_sink_config() const;
  ::FileSinkConfig* mutable_file_sink_config();
  ::FileSinkConfig* release_file_sink_config();
  void set_allocated_file_sink_config(::FileSinkConfig* file_sink_config);

  // .ChannelMapperConfig channel_mapper_config = 2;
  bool has_channel_mapper_config() const;
  void clear_channel_mapper_config();
  static const int kChannelMapperConfigFieldNumber = 2;
  const ::ChannelMapperConfig& channel_mapper_config() const;
  ::ChannelMapperConfig* mutable_channel_mapper_config();
  ::ChannelMapperConfig* release_channel_mapper_config();
  void set_allocated_channel_mapper_config(::ChannelMapperConfig* channel_mapper_config);

  // .RotatorConfig rotator_config = 3;
  bool has_rotator_config() const;
  void clear_rotator_config();
  static const int kRotatorConfigFieldNumber = 3;
  const ::RotatorConfig& rotator_config() const;
  ::RotatorConfig* mutable_rotator_config();
  ::RotatorConfig* release_rotator_config();
  void set_allocated_rotator_config(::RotatorConfig* rotator_config);

  ConfigCase config_case() const;
  // @@protoc_insertion_point(class_scope:Config)
 private:
  void set_has_file_sink_config();
  void set_has_channel_mapper_config();
  void set_has_rotator_config();

  inline bool has_config() const;
  void clear_config();
  inline void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ConfigUnion {
    ConfigUnion() {}
    ::FileSinkConfig* file_sink_config_;
    ::ChannelMapperConfig* channel_mapper_config_;
    ::RotatorConfig* rotator_config_;
  } config_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileSinkConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FileSinkConfig) */ {
 public:
  FileSinkConfig();
  virtual ~FileSinkConfig();

  FileSinkConfig(const FileSinkConfig& from);

  inline FileSinkConfig& operator=(const FileSinkConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FileSinkConfig& default_instance();

  static inline const FileSinkConfig* internal_default_instance() {
    return reinterpret_cast<const FileSinkConfig*>(
               &_FileSinkConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FileSinkConfig* other);

  // implements Message ----------------------------------------------

  inline FileSinkConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  FileSinkConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileSinkConfig& from);
  void MergeFrom(const FileSinkConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileSinkConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:FileSinkConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelMapperConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChannelMapperConfig) */ {
 public:
  ChannelMapperConfig();
  virtual ~ChannelMapperConfig();

  ChannelMapperConfig(const ChannelMapperConfig& from);

  inline ChannelMapperConfig& operator=(const ChannelMapperConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMapperConfig& default_instance();

  static inline const ChannelMapperConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelMapperConfig*>(
               &_ChannelMapperConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ChannelMapperConfig* other);

  // implements Message ----------------------------------------------

  inline ChannelMapperConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelMapperConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelMapperConfig& from);
  void MergeFrom(const ChannelMapperConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelMapperConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 dci_sizes_list = 8;
  int dci_sizes_list_size() const;
  void clear_dci_sizes_list();
  static const int kDciSizesListFieldNumber = 8;
  ::google::protobuf::uint32 dci_sizes_list(int index) const;
  void set_dci_sizes_list(int index, ::google::protobuf::uint32 value);
  void add_dci_sizes_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dci_sizes_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dci_sizes_list();

  // repeated float al_corr_thresholds = 9;
  int al_corr_thresholds_size() const;
  void clear_al_corr_thresholds();
  static const int kAlCorrThresholdsFieldNumber = 9;
  float al_corr_thresholds(int index) const;
  void set_al_corr_thresholds(int index, float value);
  void add_al_corr_thresholds(float value);
  const ::google::protobuf::RepeatedField< float >&
      al_corr_thresholds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_al_corr_thresholds();

  // repeated uint32 num_candidates_per_al = 12;
  int num_candidates_per_al_size() const;
  void clear_num_candidates_per_al();
  static const int kNumCandidatesPerAlFieldNumber = 12;
  ::google::protobuf::uint32 num_candidates_per_al(int index) const;
  void set_num_candidates_per_al(int index, ::google::protobuf::uint32 value);
  void add_num_candidates_per_al(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      num_candidates_per_al() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_num_candidates_per_al();

  // string coreset_interleaving_pattern = 16;
  void clear_coreset_interleaving_pattern();
  static const int kCoresetInterleavingPatternFieldNumber = 16;
  const ::std::string& coreset_interleaving_pattern() const;
  void set_coreset_interleaving_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_coreset_interleaving_pattern(::std::string&& value);
  #endif
  void set_coreset_interleaving_pattern(const char* value);
  void set_coreset_interleaving_pattern(const char* value, size_t size);
  ::std::string* mutable_coreset_interleaving_pattern();
  ::std::string* release_coreset_interleaving_pattern();
  void set_allocated_coreset_interleaving_pattern(::std::string* coreset_interleaving_pattern);

  // uint32 cell_id = 1;
  void clear_cell_id();
  static const int kCellIdFieldNumber = 1;
  ::google::protobuf::uint32 cell_id() const;
  void set_cell_id(::google::protobuf::uint32 value);

  // uint32 slots_per_frame = 2;
  void clear_slots_per_frame();
  static const int kSlotsPerFrameFieldNumber = 2;
  ::google::protobuf::uint32 slots_per_frame() const;
  void set_slots_per_frame(::google::protobuf::uint32 value);

  // int32 subcarrier_offset = 3;
  void clear_subcarrier_offset();
  static const int kSubcarrierOffsetFieldNumber = 3;
  ::google::protobuf::int32 subcarrier_offset() const;
  void set_subcarrier_offset(::google::protobuf::int32 value);

  // uint32 scrambling_id_start = 4;
  void clear_scrambling_id_start();
  static const int kScramblingIdStartFieldNumber = 4;
  ::google::protobuf::uint32 scrambling_id_start() const;
  void set_scrambling_id_start(::google::protobuf::uint32 value);

  // uint32 scrambling_id_end = 5;
  void clear_scrambling_id_end();
  static const int kScramblingIdEndFieldNumber = 5;
  ::google::protobuf::uint32 scrambling_id_end() const;
  void set_scrambling_id_end(::google::protobuf::uint32 value);

  // uint32 rnti_start = 6;
  void clear_rnti_start();
  static const int kRntiStartFieldNumber = 6;
  ::google::protobuf::uint32 rnti_start() const;
  void set_rnti_start(::google::protobuf::uint32 value);

  // uint32 rnti_end = 7;
  void clear_rnti_end();
  static const int kRntiEndFieldNumber = 7;
  ::google::protobuf::uint32 rnti_end() const;
  void set_rnti_end(::google::protobuf::uint32 value);

  // uint32 max_rnti_queue_size = 10;
  void clear_max_rnti_queue_size();
  static const int kMaxRntiQueueSizeFieldNumber = 10;
  ::google::protobuf::uint32 max_rnti_queue_size() const;
  void set_max_rnti_queue_size(::google::protobuf::uint32 value);

  // bool sc_power_decision = 11;
  void clear_sc_power_decision();
  static const int kScPowerDecisionFieldNumber = 11;
  bool sc_power_decision() const;
  void set_sc_power_decision(bool value);

  // uint32 coreset_id = 13;
  void clear_coreset_id();
  static const int kCoresetIdFieldNumber = 13;
  ::google::protobuf::uint32 coreset_id() const;
  void set_coreset_id(::google::protobuf::uint32 value);

  // uint32 num_prbs = 14;
  void clear_num_prbs();
  static const int kNumPrbsFieldNumber = 14;
  ::google::protobuf::uint32 num_prbs() const;
  void set_num_prbs(::google::protobuf::uint32 value);

  // uint32 coreset_duration = 15;
  void clear_coreset_duration();
  static const int kCoresetDurationFieldNumber = 15;
  ::google::protobuf::uint32 coreset_duration() const;
  void set_coreset_duration(::google::protobuf::uint32 value);

  // uint32 coreset_reg_bundle_size = 17;
  void clear_coreset_reg_bundle_size();
  static const int kCoresetRegBundleSizeFieldNumber = 17;
  ::google::protobuf::uint32 coreset_reg_bundle_size() const;
  void set_coreset_reg_bundle_size(::google::protobuf::uint32 value);

  // uint32 coreset_interleaver_size = 18;
  void clear_coreset_interleaver_size();
  static const int kCoresetInterleaverSizeFieldNumber = 18;
  ::google::protobuf::uint32 coreset_interleaver_size() const;
  void set_coreset_interleaver_size(::google::protobuf::uint32 value);

  // uint32 coreset_nshift = 19;
  void clear_coreset_nshift();
  static const int kCoresetNshiftFieldNumber = 19;
  ::google::protobuf::uint32 coreset_nshift() const;
  void set_coreset_nshift(::google::protobuf::uint32 value);

  // uint32 coreset_ofdm_symbol_start = 20;
  void clear_coreset_ofdm_symbol_start();
  static const int kCoresetOfdmSymbolStartFieldNumber = 20;
  ::google::protobuf::uint32 coreset_ofdm_symbol_start() const;
  void set_coreset_ofdm_symbol_start(::google::protobuf::uint32 value);

  // uint32 num_symbols_per_slot = 21;
  void clear_num_symbols_per_slot();
  static const int kNumSymbolsPerSlotFieldNumber = 21;
  ::google::protobuf::uint32 num_symbols_per_slot() const;
  void set_num_symbols_per_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ChannelMapperConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dci_sizes_list_;
  mutable int _dci_sizes_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > al_corr_thresholds_;
  mutable int _al_corr_thresholds_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > num_candidates_per_al_;
  mutable int _num_candidates_per_al_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr coreset_interleaving_pattern_;
  ::google::protobuf::uint32 cell_id_;
  ::google::protobuf::uint32 slots_per_frame_;
  ::google::protobuf::int32 subcarrier_offset_;
  ::google::protobuf::uint32 scrambling_id_start_;
  ::google::protobuf::uint32 scrambling_id_end_;
  ::google::protobuf::uint32 rnti_start_;
  ::google::protobuf::uint32 rnti_end_;
  ::google::protobuf::uint32 max_rnti_queue_size_;
  bool sc_power_decision_;
  ::google::protobuf::uint32 coreset_id_;
  ::google::protobuf::uint32 num_prbs_;
  ::google::protobuf::uint32 coreset_duration_;
  ::google::protobuf::uint32 coreset_reg_bundle_size_;
  ::google::protobuf::uint32 coreset_interleaver_size_;
  ::google::protobuf::uint32 coreset_nshift_;
  ::google::protobuf::uint32 coreset_ofdm_symbol_start_;
  ::google::protobuf::uint32 num_symbols_per_slot_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RotatorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RotatorConfig) */ {
 public:
  RotatorConfig();
  virtual ~RotatorConfig();

  RotatorConfig(const RotatorConfig& from);

  inline RotatorConfig& operator=(const RotatorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RotatorConfig& default_instance();

  static inline const RotatorConfig* internal_default_instance() {
    return reinterpret_cast<const RotatorConfig*>(
               &_RotatorConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RotatorConfig* other);

  // implements Message ----------------------------------------------

  inline RotatorConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  RotatorConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RotatorConfig& from);
  void MergeFrom(const RotatorConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RotatorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 sample_rate = 1;
  void clear_sample_rate();
  static const int kSampleRateFieldNumber = 1;
  ::google::protobuf::uint32 sample_rate() const;
  void set_sample_rate(::google::protobuf::uint32 value);

  // float frequency = 2;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 2;
  float frequency() const;
  void set_frequency(float value);

  // @@protoc_insertion_point(class_scope:RotatorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 sample_rate_;
  float frequency_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fprotocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowMessage

// .MessageType type = 1;
inline void FlowMessage::clear_type() {
  type_ = 0;
}
inline ::MessageType FlowMessage::type() const {
  // @@protoc_insertion_point(field_get:FlowMessage.type)
  return static_cast< ::MessageType >(type_);
}
inline void FlowMessage::set_type(::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FlowMessage.type)
}

// .HelloMessage hello_message = 2;
inline bool FlowMessage::has_hello_message() const {
  return payload_case() == kHelloMessage;
}
inline void FlowMessage::set_has_hello_message() {
  _oneof_case_[0] = kHelloMessage;
}
inline void FlowMessage::clear_hello_message() {
  if (has_hello_message()) {
    delete payload_.hello_message_;
    clear_has_payload();
  }
}
inline  const ::HelloMessage& FlowMessage::hello_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.hello_message)
  return has_hello_message()
      ? *payload_.hello_message_
      : ::HelloMessage::default_instance();
}
inline ::HelloMessage* FlowMessage::mutable_hello_message() {
  if (!has_hello_message()) {
    clear_payload();
    set_has_hello_message();
    payload_.hello_message_ = new ::HelloMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.hello_message)
  return payload_.hello_message_;
}
inline ::HelloMessage* FlowMessage::release_hello_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.hello_message)
  if (has_hello_message()) {
    clear_has_payload();
    ::HelloMessage* temp = payload_.hello_message_;
    payload_.hello_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FlowMessage::set_allocated_hello_message(::HelloMessage* hello_message) {
  clear_payload();
  if (hello_message) {
    set_has_hello_message();
    payload_.hello_message_ = hello_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.hello_message)
}

// .DataMessage data_message = 3;
inline bool FlowMessage::has_data_message() const {
  return payload_case() == kDataMessage;
}
inline void FlowMessage::set_has_data_message() {
  _oneof_case_[0] = kDataMessage;
}
inline void FlowMessage::clear_data_message() {
  if (has_data_message()) {
    delete payload_.data_message_;
    clear_has_payload();
  }
}
inline  const ::DataMessage& FlowMessage::data_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.data_message)
  return has_data_message()
      ? *payload_.data_message_
      : ::DataMessage::default_instance();
}
inline ::DataMessage* FlowMessage::mutable_data_message() {
  if (!has_data_message()) {
    clear_payload();
    set_has_data_message();
    payload_.data_message_ = new ::DataMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.data_message)
  return payload_.data_message_;
}
inline ::DataMessage* FlowMessage::release_data_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.data_message)
  if (has_data_message()) {
    clear_has_payload();
    ::DataMessage* temp = payload_.data_message_;
    payload_.data_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FlowMessage::set_allocated_data_message(::DataMessage* data_message) {
  clear_payload();
  if (data_message) {
    set_has_data_message();
    payload_.data_message_ = data_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.data_message)
}

// .StopMessage stop_message = 4;
inline bool FlowMessage::has_stop_message() const {
  return payload_case() == kStopMessage;
}
inline void FlowMessage::set_has_stop_message() {
  _oneof_case_[0] = kStopMessage;
}
inline void FlowMessage::clear_stop_message() {
  if (has_stop_message()) {
    delete payload_.stop_message_;
    clear_has_payload();
  }
}
inline  const ::StopMessage& FlowMessage::stop_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.stop_message)
  return has_stop_message()
      ? *payload_.stop_message_
      : ::StopMessage::default_instance();
}
inline ::StopMessage* FlowMessage::mutable_stop_message() {
  if (!has_stop_message()) {
    clear_payload();
    set_has_stop_message();
    payload_.stop_message_ = new ::StopMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.stop_message)
  return payload_.stop_message_;
}
inline ::StopMessage* FlowMessage::release_stop_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.stop_message)
  if (has_stop_message()) {
    clear_has_payload();
    ::StopMessage* temp = payload_.stop_message_;
    payload_.stop_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FlowMessage::set_allocated_stop_message(::StopMessage* stop_message) {
  clear_payload();
  if (stop_message) {
    set_has_stop_message();
    payload_.stop_message_ = stop_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.stop_message)
}

// .ResetMessage reset_message = 5;
inline bool FlowMessage::has_reset_message() const {
  return payload_case() == kResetMessage;
}
inline void FlowMessage::set_has_reset_message() {
  _oneof_case_[0] = kResetMessage;
}
inline void FlowMessage::clear_reset_message() {
  if (has_reset_message()) {
    delete payload_.reset_message_;
    clear_has_payload();
  }
}
inline  const ::ResetMessage& FlowMessage::reset_message() const {
  // @@protoc_insertion_point(field_get:FlowMessage.reset_message)
  return has_reset_message()
      ? *payload_.reset_message_
      : ::ResetMessage::default_instance();
}
inline ::ResetMessage* FlowMessage::mutable_reset_message() {
  if (!has_reset_message()) {
    clear_payload();
    set_has_reset_message();
    payload_.reset_message_ = new ::ResetMessage;
  }
  // @@protoc_insertion_point(field_mutable:FlowMessage.reset_message)
  return payload_.reset_message_;
}
inline ::ResetMessage* FlowMessage::release_reset_message() {
  // @@protoc_insertion_point(field_release:FlowMessage.reset_message)
  if (has_reset_message()) {
    clear_has_payload();
    ::ResetMessage* temp = payload_.reset_message_;
    payload_.reset_message_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FlowMessage::set_allocated_reset_message(::ResetMessage* reset_message) {
  clear_payload();
  if (reset_message) {
    set_has_reset_message();
    payload_.reset_message_ = reset_message;
  }
  // @@protoc_insertion_point(field_set_allocated:FlowMessage.reset_message)
}

inline bool FlowMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void FlowMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline FlowMessage::PayloadCase FlowMessage::payload_case() const {
  return FlowMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HelloMessage

// -------------------------------------------------------------------

// ConfigMessage

// string config = 1;
inline void ConfigMessage::clear_config() {
  config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigMessage::config() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.config)
  return config_.GetNoArena();
}
inline void ConfigMessage::set_config(const ::std::string& value) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConfigMessage.config)
}
#if LANG_CXX11
inline void ConfigMessage::set_config(::std::string&& value) {
  
  config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConfigMessage.config)
}
#endif
inline void ConfigMessage::set_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConfigMessage.config)
}
inline void ConfigMessage::set_config(const char* value, size_t size) {
  
  config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConfigMessage.config)
}
inline ::std::string* ConfigMessage::mutable_config() {
  
  // @@protoc_insertion_point(field_mutable:ConfigMessage.config)
  return config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigMessage::release_config() {
  // @@protoc_insertion_point(field_release:ConfigMessage.config)
  
  return config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigMessage::set_allocated_config(::std::string* config) {
  if (config != NULL) {
    
  } else {
    
  }
  config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config);
  // @@protoc_insertion_point(field_set_allocated:ConfigMessage.config)
}

// uint32 sample_rate = 2;
inline void ConfigMessage::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::sample_rate() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.sample_rate)
  return sample_rate_;
}
inline void ConfigMessage::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.sample_rate)
}

// uint32 cell_id = 3;
inline void ConfigMessage::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::cell_id() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.cell_id)
  return cell_id_;
}
inline void ConfigMessage::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.cell_id)
}

// uint32 slots_per_frame = 4;
inline void ConfigMessage::clear_slots_per_frame() {
  slots_per_frame_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::slots_per_frame() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.slots_per_frame)
  return slots_per_frame_;
}
inline void ConfigMessage::set_slots_per_frame(::google::protobuf::uint32 value) {
  
  slots_per_frame_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.slots_per_frame)
}

// uint32 ssb_scs = 5;
inline void ConfigMessage::clear_ssb_scs() {
  ssb_scs_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::ssb_scs() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.ssb_scs)
  return ssb_scs_;
}
inline void ConfigMessage::set_ssb_scs(::google::protobuf::uint32 value) {
  
  ssb_scs_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.ssb_scs)
}

// uint32 mib_scs_common = 6;
inline void ConfigMessage::clear_mib_scs_common() {
  mib_scs_common_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::mib_scs_common() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_scs_common)
  return mib_scs_common_;
}
inline void ConfigMessage::set_mib_scs_common(::google::protobuf::uint32 value) {
  
  mib_scs_common_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_scs_common)
}

// uint32 mib_coreset0_index = 7;
inline void ConfigMessage::clear_mib_coreset0_index() {
  mib_coreset0_index_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::mib_coreset0_index() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_coreset0_index)
  return mib_coreset0_index_;
}
inline void ConfigMessage::set_mib_coreset0_index(::google::protobuf::uint32 value) {
  
  mib_coreset0_index_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_coreset0_index)
}

// uint32 mib_ssb_offset = 8;
inline void ConfigMessage::clear_mib_ssb_offset() {
  mib_ssb_offset_ = 0u;
}
inline ::google::protobuf::uint32 ConfigMessage::mib_ssb_offset() const {
  // @@protoc_insertion_point(field_get:ConfigMessage.mib_ssb_offset)
  return mib_ssb_offset_;
}
inline void ConfigMessage::set_mib_ssb_offset(::google::protobuf::uint32 value) {
  
  mib_ssb_offset_ = value;
  // @@protoc_insertion_point(field_set:ConfigMessage.mib_ssb_offset)
}

// -------------------------------------------------------------------

// DataMessage

// bytes data = 1;
inline void DataMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataMessage::data() const {
  // @@protoc_insertion_point(field_get:DataMessage.data)
  return data_.GetNoArena();
}
inline void DataMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DataMessage.data)
}
#if LANG_CXX11
inline void DataMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DataMessage.data)
}
#endif
inline void DataMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DataMessage.data)
}
inline void DataMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DataMessage.data)
}
inline ::std::string* DataMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:DataMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataMessage::release_data() {
  // @@protoc_insertion_point(field_release:DataMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:DataMessage.data)
}

// -------------------------------------------------------------------

// StopMessage

// -------------------------------------------------------------------

// ResetMessage

// -------------------------------------------------------------------

// Config

// .FileSinkConfig file_sink_config = 1;
inline bool Config::has_file_sink_config() const {
  return config_case() == kFileSinkConfig;
}
inline void Config::set_has_file_sink_config() {
  _oneof_case_[0] = kFileSinkConfig;
}
inline void Config::clear_file_sink_config() {
  if (has_file_sink_config()) {
    delete config_.file_sink_config_;
    clear_has_config();
  }
}
inline  const ::FileSinkConfig& Config::file_sink_config() const {
  // @@protoc_insertion_point(field_get:Config.file_sink_config)
  return has_file_sink_config()
      ? *config_.file_sink_config_
      : ::FileSinkConfig::default_instance();
}
inline ::FileSinkConfig* Config::mutable_file_sink_config() {
  if (!has_file_sink_config()) {
    clear_config();
    set_has_file_sink_config();
    config_.file_sink_config_ = new ::FileSinkConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.file_sink_config)
  return config_.file_sink_config_;
}
inline ::FileSinkConfig* Config::release_file_sink_config() {
  // @@protoc_insertion_point(field_release:Config.file_sink_config)
  if (has_file_sink_config()) {
    clear_has_config();
    ::FileSinkConfig* temp = config_.file_sink_config_;
    config_.file_sink_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Config::set_allocated_file_sink_config(::FileSinkConfig* file_sink_config) {
  clear_config();
  if (file_sink_config) {
    set_has_file_sink_config();
    config_.file_sink_config_ = file_sink_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.file_sink_config)
}

// .ChannelMapperConfig channel_mapper_config = 2;
inline bool Config::has_channel_mapper_config() const {
  return config_case() == kChannelMapperConfig;
}
inline void Config::set_has_channel_mapper_config() {
  _oneof_case_[0] = kChannelMapperConfig;
}
inline void Config::clear_channel_mapper_config() {
  if (has_channel_mapper_config()) {
    delete config_.channel_mapper_config_;
    clear_has_config();
  }
}
inline  const ::ChannelMapperConfig& Config::channel_mapper_config() const {
  // @@protoc_insertion_point(field_get:Config.channel_mapper_config)
  return has_channel_mapper_config()
      ? *config_.channel_mapper_config_
      : ::ChannelMapperConfig::default_instance();
}
inline ::ChannelMapperConfig* Config::mutable_channel_mapper_config() {
  if (!has_channel_mapper_config()) {
    clear_config();
    set_has_channel_mapper_config();
    config_.channel_mapper_config_ = new ::ChannelMapperConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.channel_mapper_config)
  return config_.channel_mapper_config_;
}
inline ::ChannelMapperConfig* Config::release_channel_mapper_config() {
  // @@protoc_insertion_point(field_release:Config.channel_mapper_config)
  if (has_channel_mapper_config()) {
    clear_has_config();
    ::ChannelMapperConfig* temp = config_.channel_mapper_config_;
    config_.channel_mapper_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Config::set_allocated_channel_mapper_config(::ChannelMapperConfig* channel_mapper_config) {
  clear_config();
  if (channel_mapper_config) {
    set_has_channel_mapper_config();
    config_.channel_mapper_config_ = channel_mapper_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.channel_mapper_config)
}

// .RotatorConfig rotator_config = 3;
inline bool Config::has_rotator_config() const {
  return config_case() == kRotatorConfig;
}
inline void Config::set_has_rotator_config() {
  _oneof_case_[0] = kRotatorConfig;
}
inline void Config::clear_rotator_config() {
  if (has_rotator_config()) {
    delete config_.rotator_config_;
    clear_has_config();
  }
}
inline  const ::RotatorConfig& Config::rotator_config() const {
  // @@protoc_insertion_point(field_get:Config.rotator_config)
  return has_rotator_config()
      ? *config_.rotator_config_
      : ::RotatorConfig::default_instance();
}
inline ::RotatorConfig* Config::mutable_rotator_config() {
  if (!has_rotator_config()) {
    clear_config();
    set_has_rotator_config();
    config_.rotator_config_ = new ::RotatorConfig;
  }
  // @@protoc_insertion_point(field_mutable:Config.rotator_config)
  return config_.rotator_config_;
}
inline ::RotatorConfig* Config::release_rotator_config() {
  // @@protoc_insertion_point(field_release:Config.rotator_config)
  if (has_rotator_config()) {
    clear_has_config();
    ::RotatorConfig* temp = config_.rotator_config_;
    config_.rotator_config_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Config::set_allocated_rotator_config(::RotatorConfig* rotator_config) {
  clear_config();
  if (rotator_config) {
    set_has_rotator_config();
    config_.rotator_config_ = rotator_config;
  }
  // @@protoc_insertion_point(field_set_allocated:Config.rotator_config)
}

inline bool Config::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void Config::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline Config::ConfigCase Config::config_case() const {
  return Config::ConfigCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileSinkConfig

// string path = 1;
inline void FileSinkConfig::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileSinkConfig::path() const {
  // @@protoc_insertion_point(field_get:FileSinkConfig.path)
  return path_.GetNoArena();
}
inline void FileSinkConfig::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FileSinkConfig.path)
}
#if LANG_CXX11
inline void FileSinkConfig::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FileSinkConfig.path)
}
#endif
inline void FileSinkConfig::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FileSinkConfig.path)
}
inline void FileSinkConfig::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FileSinkConfig.path)
}
inline ::std::string* FileSinkConfig::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:FileSinkConfig.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileSinkConfig::release_path() {
  // @@protoc_insertion_point(field_release:FileSinkConfig.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileSinkConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:FileSinkConfig.path)
}

// -------------------------------------------------------------------

// ChannelMapperConfig

// uint32 cell_id = 1;
inline void ChannelMapperConfig::clear_cell_id() {
  cell_id_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::cell_id() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.cell_id)
  return cell_id_;
}
inline void ChannelMapperConfig::set_cell_id(::google::protobuf::uint32 value) {
  
  cell_id_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.cell_id)
}

// uint32 slots_per_frame = 2;
inline void ChannelMapperConfig::clear_slots_per_frame() {
  slots_per_frame_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::slots_per_frame() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.slots_per_frame)
  return slots_per_frame_;
}
inline void ChannelMapperConfig::set_slots_per_frame(::google::protobuf::uint32 value) {
  
  slots_per_frame_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.slots_per_frame)
}

// int32 subcarrier_offset = 3;
inline void ChannelMapperConfig::clear_subcarrier_offset() {
  subcarrier_offset_ = 0;
}
inline ::google::protobuf::int32 ChannelMapperConfig::subcarrier_offset() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.subcarrier_offset)
  return subcarrier_offset_;
}
inline void ChannelMapperConfig::set_subcarrier_offset(::google::protobuf::int32 value) {
  
  subcarrier_offset_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.subcarrier_offset)
}

// uint32 scrambling_id_start = 4;
inline void ChannelMapperConfig::clear_scrambling_id_start() {
  scrambling_id_start_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::scrambling_id_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.scrambling_id_start)
  return scrambling_id_start_;
}
inline void ChannelMapperConfig::set_scrambling_id_start(::google::protobuf::uint32 value) {
  
  scrambling_id_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.scrambling_id_start)
}

// uint32 scrambling_id_end = 5;
inline void ChannelMapperConfig::clear_scrambling_id_end() {
  scrambling_id_end_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::scrambling_id_end() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.scrambling_id_end)
  return scrambling_id_end_;
}
inline void ChannelMapperConfig::set_scrambling_id_end(::google::protobuf::uint32 value) {
  
  scrambling_id_end_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.scrambling_id_end)
}

// uint32 rnti_start = 6;
inline void ChannelMapperConfig::clear_rnti_start() {
  rnti_start_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::rnti_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.rnti_start)
  return rnti_start_;
}
inline void ChannelMapperConfig::set_rnti_start(::google::protobuf::uint32 value) {
  
  rnti_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.rnti_start)
}

// uint32 rnti_end = 7;
inline void ChannelMapperConfig::clear_rnti_end() {
  rnti_end_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::rnti_end() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.rnti_end)
  return rnti_end_;
}
inline void ChannelMapperConfig::set_rnti_end(::google::protobuf::uint32 value) {
  
  rnti_end_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.rnti_end)
}

// repeated uint32 dci_sizes_list = 8;
inline int ChannelMapperConfig::dci_sizes_list_size() const {
  return dci_sizes_list_.size();
}
inline void ChannelMapperConfig::clear_dci_sizes_list() {
  dci_sizes_list_.Clear();
}
inline ::google::protobuf::uint32 ChannelMapperConfig::dci_sizes_list(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.dci_sizes_list)
  return dci_sizes_list_.Get(index);
}
inline void ChannelMapperConfig::set_dci_sizes_list(int index, ::google::protobuf::uint32 value) {
  dci_sizes_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.dci_sizes_list)
}
inline void ChannelMapperConfig::add_dci_sizes_list(::google::protobuf::uint32 value) {
  dci_sizes_list_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.dci_sizes_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelMapperConfig::dci_sizes_list() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.dci_sizes_list)
  return dci_sizes_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelMapperConfig::mutable_dci_sizes_list() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.dci_sizes_list)
  return &dci_sizes_list_;
}

// repeated float al_corr_thresholds = 9;
inline int ChannelMapperConfig::al_corr_thresholds_size() const {
  return al_corr_thresholds_.size();
}
inline void ChannelMapperConfig::clear_al_corr_thresholds() {
  al_corr_thresholds_.Clear();
}
inline float ChannelMapperConfig::al_corr_thresholds(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.al_corr_thresholds)
  return al_corr_thresholds_.Get(index);
}
inline void ChannelMapperConfig::set_al_corr_thresholds(int index, float value) {
  al_corr_thresholds_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.al_corr_thresholds)
}
inline void ChannelMapperConfig::add_al_corr_thresholds(float value) {
  al_corr_thresholds_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.al_corr_thresholds)
}
inline const ::google::protobuf::RepeatedField< float >&
ChannelMapperConfig::al_corr_thresholds() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.al_corr_thresholds)
  return al_corr_thresholds_;
}
inline ::google::protobuf::RepeatedField< float >*
ChannelMapperConfig::mutable_al_corr_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.al_corr_thresholds)
  return &al_corr_thresholds_;
}

// uint32 max_rnti_queue_size = 10;
inline void ChannelMapperConfig::clear_max_rnti_queue_size() {
  max_rnti_queue_size_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::max_rnti_queue_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.max_rnti_queue_size)
  return max_rnti_queue_size_;
}
inline void ChannelMapperConfig::set_max_rnti_queue_size(::google::protobuf::uint32 value) {
  
  max_rnti_queue_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.max_rnti_queue_size)
}

// bool sc_power_decision = 11;
inline void ChannelMapperConfig::clear_sc_power_decision() {
  sc_power_decision_ = false;
}
inline bool ChannelMapperConfig::sc_power_decision() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.sc_power_decision)
  return sc_power_decision_;
}
inline void ChannelMapperConfig::set_sc_power_decision(bool value) {
  
  sc_power_decision_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.sc_power_decision)
}

// repeated uint32 num_candidates_per_al = 12;
inline int ChannelMapperConfig::num_candidates_per_al_size() const {
  return num_candidates_per_al_.size();
}
inline void ChannelMapperConfig::clear_num_candidates_per_al() {
  num_candidates_per_al_.Clear();
}
inline ::google::protobuf::uint32 ChannelMapperConfig::num_candidates_per_al(int index) const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_candidates_per_al)
  return num_candidates_per_al_.Get(index);
}
inline void ChannelMapperConfig::set_num_candidates_per_al(int index, ::google::protobuf::uint32 value) {
  num_candidates_per_al_.Set(index, value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_candidates_per_al)
}
inline void ChannelMapperConfig::add_num_candidates_per_al(::google::protobuf::uint32 value) {
  num_candidates_per_al_.Add(value);
  // @@protoc_insertion_point(field_add:ChannelMapperConfig.num_candidates_per_al)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChannelMapperConfig::num_candidates_per_al() const {
  // @@protoc_insertion_point(field_list:ChannelMapperConfig.num_candidates_per_al)
  return num_candidates_per_al_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChannelMapperConfig::mutable_num_candidates_per_al() {
  // @@protoc_insertion_point(field_mutable_list:ChannelMapperConfig.num_candidates_per_al)
  return &num_candidates_per_al_;
}

// uint32 coreset_id = 13;
inline void ChannelMapperConfig::clear_coreset_id() {
  coreset_id_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_id() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_id)
  return coreset_id_;
}
inline void ChannelMapperConfig::set_coreset_id(::google::protobuf::uint32 value) {
  
  coreset_id_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_id)
}

// uint32 num_prbs = 14;
inline void ChannelMapperConfig::clear_num_prbs() {
  num_prbs_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::num_prbs() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_prbs)
  return num_prbs_;
}
inline void ChannelMapperConfig::set_num_prbs(::google::protobuf::uint32 value) {
  
  num_prbs_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_prbs)
}

// uint32 coreset_duration = 15;
inline void ChannelMapperConfig::clear_coreset_duration() {
  coreset_duration_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_duration() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_duration)
  return coreset_duration_;
}
inline void ChannelMapperConfig::set_coreset_duration(::google::protobuf::uint32 value) {
  
  coreset_duration_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_duration)
}

// string coreset_interleaving_pattern = 16;
inline void ChannelMapperConfig::clear_coreset_interleaving_pattern() {
  coreset_interleaving_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChannelMapperConfig::coreset_interleaving_pattern() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_interleaving_pattern)
  return coreset_interleaving_pattern_.GetNoArena();
}
inline void ChannelMapperConfig::set_coreset_interleaving_pattern(const ::std::string& value) {
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_interleaving_pattern)
}
#if LANG_CXX11
inline void ChannelMapperConfig::set_coreset_interleaving_pattern(::std::string&& value) {
  
  coreset_interleaving_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChannelMapperConfig.coreset_interleaving_pattern)
}
#endif
inline void ChannelMapperConfig::set_coreset_interleaving_pattern(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChannelMapperConfig.coreset_interleaving_pattern)
}
inline void ChannelMapperConfig::set_coreset_interleaving_pattern(const char* value, size_t size) {
  
  coreset_interleaving_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChannelMapperConfig.coreset_interleaving_pattern)
}
inline ::std::string* ChannelMapperConfig::mutable_coreset_interleaving_pattern() {
  
  // @@protoc_insertion_point(field_mutable:ChannelMapperConfig.coreset_interleaving_pattern)
  return coreset_interleaving_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChannelMapperConfig::release_coreset_interleaving_pattern() {
  // @@protoc_insertion_point(field_release:ChannelMapperConfig.coreset_interleaving_pattern)
  
  return coreset_interleaving_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelMapperConfig::set_allocated_coreset_interleaving_pattern(::std::string* coreset_interleaving_pattern) {
  if (coreset_interleaving_pattern != NULL) {
    
  } else {
    
  }
  coreset_interleaving_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coreset_interleaving_pattern);
  // @@protoc_insertion_point(field_set_allocated:ChannelMapperConfig.coreset_interleaving_pattern)
}

// uint32 coreset_reg_bundle_size = 17;
inline void ChannelMapperConfig::clear_coreset_reg_bundle_size() {
  coreset_reg_bundle_size_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_reg_bundle_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_reg_bundle_size)
  return coreset_reg_bundle_size_;
}
inline void ChannelMapperConfig::set_coreset_reg_bundle_size(::google::protobuf::uint32 value) {
  
  coreset_reg_bundle_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_reg_bundle_size)
}

// uint32 coreset_interleaver_size = 18;
inline void ChannelMapperConfig::clear_coreset_interleaver_size() {
  coreset_interleaver_size_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_interleaver_size() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_interleaver_size)
  return coreset_interleaver_size_;
}
inline void ChannelMapperConfig::set_coreset_interleaver_size(::google::protobuf::uint32 value) {
  
  coreset_interleaver_size_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_interleaver_size)
}

// uint32 coreset_nshift = 19;
inline void ChannelMapperConfig::clear_coreset_nshift() {
  coreset_nshift_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_nshift() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_nshift)
  return coreset_nshift_;
}
inline void ChannelMapperConfig::set_coreset_nshift(::google::protobuf::uint32 value) {
  
  coreset_nshift_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_nshift)
}

// uint32 coreset_ofdm_symbol_start = 20;
inline void ChannelMapperConfig::clear_coreset_ofdm_symbol_start() {
  coreset_ofdm_symbol_start_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::coreset_ofdm_symbol_start() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.coreset_ofdm_symbol_start)
  return coreset_ofdm_symbol_start_;
}
inline void ChannelMapperConfig::set_coreset_ofdm_symbol_start(::google::protobuf::uint32 value) {
  
  coreset_ofdm_symbol_start_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.coreset_ofdm_symbol_start)
}

// uint32 num_symbols_per_slot = 21;
inline void ChannelMapperConfig::clear_num_symbols_per_slot() {
  num_symbols_per_slot_ = 0u;
}
inline ::google::protobuf::uint32 ChannelMapperConfig::num_symbols_per_slot() const {
  // @@protoc_insertion_point(field_get:ChannelMapperConfig.num_symbols_per_slot)
  return num_symbols_per_slot_;
}
inline void ChannelMapperConfig::set_num_symbols_per_slot(::google::protobuf::uint32 value) {
  
  num_symbols_per_slot_ = value;
  // @@protoc_insertion_point(field_set:ChannelMapperConfig.num_symbols_per_slot)
}

// -------------------------------------------------------------------

// RotatorConfig

// uint32 sample_rate = 1;
inline void RotatorConfig::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline ::google::protobuf::uint32 RotatorConfig::sample_rate() const {
  // @@protoc_insertion_point(field_get:RotatorConfig.sample_rate)
  return sample_rate_;
}
inline void RotatorConfig::set_sample_rate(::google::protobuf::uint32 value) {
  
  sample_rate_ = value;
  // @@protoc_insertion_point(field_set:RotatorConfig.sample_rate)
}

// float frequency = 2;
inline void RotatorConfig::clear_frequency() {
  frequency_ = 0;
}
inline float RotatorConfig::frequency() const {
  // @@protoc_insertion_point(field_get:RotatorConfig.frequency)
  return frequency_;
}
inline void RotatorConfig::set_frequency(float value) {
  
  frequency_ = value;
  // @@protoc_insertion_point(field_set:RotatorConfig.frequency)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageType>() {
  return ::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fprotocol_2eproto__INCLUDED
